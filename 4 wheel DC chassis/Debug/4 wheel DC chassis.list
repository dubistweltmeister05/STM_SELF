
4 wheel DC chassis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c10  08000c10  00010c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c1c  08000c1c  00010c24  2**0
                  CONTENTS
  4 .ARM          00000000  08000c1c  08000c1c  00010c24  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c1c  08000c24  00010c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c1c  08000c1c  00010c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c20  08000c20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010c24  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010c24  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017b4  00000000  00000000  00010c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a3  00000000  00000000  00012408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  000129b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000110  00000000  00000000  00012b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024e8  00000000  00000000  00012c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d38  00000000  00000000  00015100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7268  00000000  00000000  00016e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000de0a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000454  00000000  00000000  000de0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000bf8 	.word	0x08000bf8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000bf8 	.word	0x08000bf8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
void Button_Init();

void delay();

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 80001de:	4a20      	ldr	r2, [pc, #128]	; (8000260 <main+0x88>)
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80001e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80001e8:	f000 f840 	bl	800026c <SPI2_GPIOInits>

	Button_Init();
 80001ec:	f000 f884 	bl	80002f8 <Button_Init>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80001f0:	f000 f864 	bl	80002bc <SPI2_Inits>

	SPI_SSOEConfig(SPI2,ENABLE);
 80001f4:	2101      	movs	r1, #1
 80001f6:	481b      	ldr	r0, [pc, #108]	; (8000264 <main+0x8c>)
 80001f8:	f000 fc82 	bl	8000b00 <SPI_SSOEConfig>

	while(1){

		while(!(GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0)));
 80001fc:	bf00      	nop
 80001fe:	2100      	movs	r1, #0
 8000200:	4819      	ldr	r0, [pc, #100]	; (8000268 <main+0x90>)
 8000202:	f000 fb31 	bl	8000868 <GPIO_ReadFromInputPin>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d0f8      	beq.n	80001fe <main+0x26>

		delay();
 800020c:	f000 f88c 	bl	8000328 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8000210:	2101      	movs	r1, #1
 8000212:	4814      	ldr	r0, [pc, #80]	; (8000264 <main+0x8c>)
 8000214:	f000 fc58 	bl	8000ac8 <SPI_PeripheralControl>

        //first send the length information
		uint8_t datalen = strlen(user_data);
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	4618      	mov	r0, r3
 800021c:	f7ff ffd4 	bl	80001c8 <strlen>
 8000220:	4603      	mov	r3, r0
 8000222:	b2db      	uxtb	r3, r3
 8000224:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2,&datalen,1);
 8000226:	1cfb      	adds	r3, r7, #3
 8000228:	2201      	movs	r2, #1
 800022a:	4619      	mov	r1, r3
 800022c:	480d      	ldr	r0, [pc, #52]	; (8000264 <main+0x8c>)
 800022e:	f000 fc14 	bl	8000a5a <SPI_SendData>

		//to send data
		SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f7ff ffc7 	bl	80001c8 <strlen>
 800023a:	4602      	mov	r2, r0
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4808      	ldr	r0, [pc, #32]	; (8000264 <main+0x8c>)
 8000242:	f000 fc0a 	bl	8000a5a <SPI_SendData>

		while (SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000246:	bf00      	nop
 8000248:	2180      	movs	r1, #128	; 0x80
 800024a:	4806      	ldr	r0, [pc, #24]	; (8000264 <main+0x8c>)
 800024c:	f000 fbf1 	bl	8000a32 <SPI_GetFlagStatus>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d1f8      	bne.n	8000248 <main+0x70>
		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 8000256:	2100      	movs	r1, #0
 8000258:	4802      	ldr	r0, [pc, #8]	; (8000264 <main+0x8c>)
 800025a:	f000 fc35 	bl	8000ac8 <SPI_PeripheralControl>
	while(1){
 800025e:	e7cd      	b.n	80001fc <main+0x24>
 8000260:	08000c10 	.word	0x08000c10
 8000264:	40003800 	.word	0x40003800
 8000268:	40020000 	.word	0x40020000

0800026c <SPI2_GPIOInits>:


/*
 * User Function Implementation
 */
void SPI2_GPIOInits(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <SPI2_GPIOInits+0x4c>)
 8000274:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000276:	2302      	movs	r3, #2
 8000278:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800027a:	2305      	movs	r3, #5
 800027c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800027e:	2300      	movs	r3, #0
 8000280:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000282:	2300      	movs	r3, #0
 8000284:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000286:	2302      	movs	r3, #2
 8000288:	72bb      	strb	r3, [r7, #10]

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13; //For the SCLK
 800028a:	230d      	movs	r3, #13
 800028c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f000 f947 	bl	8000524 <GPIO_Init>

//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14; //For the MISO
//	GPIO_Init(&SPIPins);

		SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15; //For the MOSI
 8000296:	230f      	movs	r3, #15
 8000298:	723b      	strb	r3, [r7, #8]
		GPIO_Init(&SPIPins);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f941 	bl	8000524 <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12; //For the NSS
 80002a2:	230c      	movs	r3, #12
 80002a4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f93b 	bl	8000524 <GPIO_Init>
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40020400 	.word	0x40020400

080002bc <SPI2_Inits>:

void SPI2_Inits(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <SPI2_Inits+0x38>)
 80002c4:	607b      	str	r3, [r7, #4]

	SPI2handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002c6:	2301      	movs	r3, #1
 80002c8:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 80002ca:	2300      	movs	r3, #0
 80002cc:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV_8;
 80002ce:	2302      	movs	r3, #2
 80002d0:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPI_Config.SPI_BusConfig = SPI_BUSCONGID_FD;
 80002d2:	2301      	movs	r3, #1
 80002d4:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 80002d6:	2300      	movs	r3, #0
 80002d8:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 80002da:	2300      	movs	r3, #0
 80002dc:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPI_Config.SPI_SSM = SPI_SSM_DI;
 80002de:	2300      	movs	r3, #0
 80002e0:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fb45 	bl	8000974 <SPI_Init>
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40003800 	.word	0x40003800

080002f8 <Button_Init>:

void Button_Init(){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t Button;
	Button.pGPIOx = GPIOA;
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <Button_Init+0x2c>)
 8000300:	607b      	str	r3, [r7, #4]
	Button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000302:	2300      	movs	r3, #0
 8000304:	727b      	strb	r3, [r7, #9]
	Button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000306:	2300      	movs	r3, #0
 8000308:	723b      	strb	r3, [r7, #8]
	Button.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800030a:	2302      	movs	r3, #2
 800030c:	72bb      	strb	r3, [r7, #10]
	Button.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800030e:	2300      	movs	r3, #0
 8000310:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&Button);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 f905 	bl	8000524 <GPIO_Init>

}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40020000 	.word	0x40020000

08000328 <delay>:

void delay() {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
	for (int i=0;i<500000;i++);
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	e002      	b.n	800033a <delay+0x12>
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3301      	adds	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <delay+0x28>)
 800033e:	4293      	cmp	r3, r2
 8000340:	ddf8      	ble.n	8000334 <delay+0xc>
}
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	0007a11f 	.word	0x0007a11f

08000354 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d162      	bne.n	800042c <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a64      	ldr	r2, [pc, #400]	; (80004fc <GPIO_PeriClockControl+0x1a8>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800036e:	4b64      	ldr	r3, [pc, #400]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a63      	ldr	r2, [pc, #396]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 800037a:	e0b9      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a61      	ldr	r2, [pc, #388]	; (8000504 <GPIO_PeriClockControl+0x1b0>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000384:	4b5e      	ldr	r3, [pc, #376]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a5d      	ldr	r2, [pc, #372]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800038a:	f043 0302 	orr.w	r3, r3, #2
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000390:	e0ae      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a5c      	ldr	r2, [pc, #368]	; (8000508 <GPIO_PeriClockControl+0x1b4>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800039a:	4b59      	ldr	r3, [pc, #356]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	4a58      	ldr	r2, [pc, #352]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003a0:	f043 0304 	orr.w	r3, r3, #4
 80003a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a6:	e0a3      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a58      	ldr	r2, [pc, #352]	; (800050c <GPIO_PeriClockControl+0x1b8>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003b0:	4b53      	ldr	r3, [pc, #332]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a52      	ldr	r2, [pc, #328]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003b6:	f043 0308 	orr.w	r3, r3, #8
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003bc:	e098      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a53      	ldr	r2, [pc, #332]	; (8000510 <GPIO_PeriClockControl+0x1bc>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003c6:	4b4e      	ldr	r3, [pc, #312]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a4d      	ldr	r2, [pc, #308]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	f043 0310 	orr.w	r3, r3, #16
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d2:	e08d      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a4f      	ldr	r2, [pc, #316]	; (8000514 <GPIO_PeriClockControl+0x1c0>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003dc:	4b48      	ldr	r3, [pc, #288]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	4a47      	ldr	r2, [pc, #284]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	f043 0320 	orr.w	r3, r3, #32
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e8:	e082      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a4a      	ldr	r2, [pc, #296]	; (8000518 <GPIO_PeriClockControl+0x1c4>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003f2:	4b43      	ldr	r3, [pc, #268]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	4a42      	ldr	r2, [pc, #264]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fe:	e077      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a46      	ldr	r2, [pc, #280]	; (800051c <GPIO_PeriClockControl+0x1c8>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000408:	4b3d      	ldr	r3, [pc, #244]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a3c      	ldr	r2, [pc, #240]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800040e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000412:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000414:	e06c      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a41      	ldr	r2, [pc, #260]	; (8000520 <GPIO_PeriClockControl+0x1cc>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d168      	bne.n	80004f0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800041e:	4b38      	ldr	r3, [pc, #224]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a37      	ldr	r2, [pc, #220]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042a:	e061      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a33      	ldr	r2, [pc, #204]	; (80004fc <GPIO_PeriClockControl+0x1a8>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000434:	4b32      	ldr	r3, [pc, #200]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a31      	ldr	r2, [pc, #196]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800043a:	f023 0301 	bic.w	r3, r3, #1
 800043e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000440:	e056      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a2f      	ldr	r2, [pc, #188]	; (8000504 <GPIO_PeriClockControl+0x1b0>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800044a:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	4a2c      	ldr	r2, [pc, #176]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000450:	f023 0302 	bic.w	r3, r3, #2
 8000454:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000456:	e04b      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a2b      	ldr	r2, [pc, #172]	; (8000508 <GPIO_PeriClockControl+0x1b4>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000460:	4b27      	ldr	r3, [pc, #156]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a26      	ldr	r2, [pc, #152]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000466:	f023 0304 	bic.w	r3, r3, #4
 800046a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046c:	e040      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a26      	ldr	r2, [pc, #152]	; (800050c <GPIO_PeriClockControl+0x1b8>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000476:	4b22      	ldr	r3, [pc, #136]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a21      	ldr	r2, [pc, #132]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800047c:	f023 0308 	bic.w	r3, r3, #8
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000482:	e035      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a22      	ldr	r2, [pc, #136]	; (8000510 <GPIO_PeriClockControl+0x1bc>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800048c:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000490:	4a1b      	ldr	r2, [pc, #108]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000492:	f023 0310 	bic.w	r3, r3, #16
 8000496:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000498:	e02a      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a1d      	ldr	r2, [pc, #116]	; (8000514 <GPIO_PeriClockControl+0x1c0>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	4a16      	ldr	r2, [pc, #88]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004a8:	f023 0320 	bic.w	r3, r3, #32
 80004ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ae:	e01f      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a19      	ldr	r2, [pc, #100]	; (8000518 <GPIO_PeriClockControl+0x1c4>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004bc:	4a10      	ldr	r2, [pc, #64]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c4:	e014      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a14      	ldr	r2, [pc, #80]	; (800051c <GPIO_PeriClockControl+0x1c8>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004da:	e009      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a10      	ldr	r2, [pc, #64]	; (8000520 <GPIO_PeriClockControl+0x1cc>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d105      	bne.n	80004f0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40020000 	.word	0x40020000
 8000500:	40023800 	.word	0x40023800
 8000504:	40020400 	.word	0x40020400
 8000508:	40020800 	.word	0x40020800
 800050c:	40020c00 	.word	0x40020c00
 8000510:	40021000 	.word	0x40021000
 8000514:	40021400 	.word	0x40021400
 8000518:	40021800 	.word	0x40021800
 800051c:	40021c00 	.word	0x40021c00
 8000520:	40022000 	.word	0x40022000

08000524 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; //temp. register
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2101      	movs	r1, #1
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff0c 	bl	8000354 <GPIO_PeriClockControl>
	 * Mode Configuration
	 */

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d820      	bhi.n	8000586 <GPIO_Init+0x62>
	{
		//the non interrupt mode

		//writing the pinmode at appropriate bits of MODER
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	461a      	mov	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	617b      	str	r3, [r7, #20]

		//clearing any pre-set bits
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	2103      	movs	r1, #3
 8000564:	fa01 f303 	lsl.w	r3, r1, r3
 8000568:	43db      	mvns	r3, r3
 800056a:	4619      	mov	r1, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	400a      	ands	r2, r1
 8000572:	601a      	str	r2, [r3, #0]

		//setting the value already loaded in temp.
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6819      	ldr	r1, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	430a      	orrs	r2, r1
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	e0cb      	b.n	800071e <GPIO_Init+0x1fa>
	}else
	{
		//this part is the interrupt mode, so special coding is needed

		//1. Select the triggering mechanism
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) //Falling edge triggering
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	795b      	ldrb	r3, [r3, #5]
 800058a:	2b04      	cmp	r3, #4
 800058c:	d117      	bne.n	80005be <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058e:	4b4b      	ldr	r3, [pc, #300]	; (80006bc <GPIO_Init+0x198>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	7912      	ldrb	r2, [r2, #4]
 8000596:	4611      	mov	r1, r2
 8000598:	2201      	movs	r2, #1
 800059a:	408a      	lsls	r2, r1
 800059c:	4611      	mov	r1, r2
 800059e:	4a47      	ldr	r2, [pc, #284]	; (80006bc <GPIO_Init+0x198>)
 80005a0:	430b      	orrs	r3, r1
 80005a2:	60d3      	str	r3, [r2, #12]

			//2.Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a4:	4b45      	ldr	r3, [pc, #276]	; (80006bc <GPIO_Init+0x198>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	7912      	ldrb	r2, [r2, #4]
 80005ac:	4611      	mov	r1, r2
 80005ae:	2201      	movs	r2, #1
 80005b0:	408a      	lsls	r2, r1
 80005b2:	43d2      	mvns	r2, r2
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a41      	ldr	r2, [pc, #260]	; (80006bc <GPIO_Init+0x198>)
 80005b8:	400b      	ands	r3, r1
 80005ba:	6093      	str	r3, [r2, #8]
 80005bc:	e035      	b.n	800062a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) //Rising edge triggering
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	795b      	ldrb	r3, [r3, #5]
 80005c2:	2b05      	cmp	r3, #5
 80005c4:	d117      	bne.n	80005f6 <GPIO_Init+0xd2>
		{
			//1.configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c6:	4b3d      	ldr	r3, [pc, #244]	; (80006bc <GPIO_Init+0x198>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	7912      	ldrb	r2, [r2, #4]
 80005ce:	4611      	mov	r1, r2
 80005d0:	2201      	movs	r2, #1
 80005d2:	408a      	lsls	r2, r1
 80005d4:	4611      	mov	r1, r2
 80005d6:	4a39      	ldr	r2, [pc, #228]	; (80006bc <GPIO_Init+0x198>)
 80005d8:	430b      	orrs	r3, r1
 80005da:	6093      	str	r3, [r2, #8]

			//2.Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005dc:	4b37      	ldr	r3, [pc, #220]	; (80006bc <GPIO_Init+0x198>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	7912      	ldrb	r2, [r2, #4]
 80005e4:	4611      	mov	r1, r2
 80005e6:	2201      	movs	r2, #1
 80005e8:	408a      	lsls	r2, r1
 80005ea:	43d2      	mvns	r2, r2
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a33      	ldr	r2, [pc, #204]	; (80006bc <GPIO_Init+0x198>)
 80005f0:	400b      	ands	r3, r1
 80005f2:	60d3      	str	r3, [r2, #12]
 80005f4:	e019      	b.n	800062a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )//Dual Triggering
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	795b      	ldrb	r3, [r3, #5]
 80005fa:	2b06      	cmp	r3, #6
 80005fc:	d115      	bne.n	800062a <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <GPIO_Init+0x198>)
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	7912      	ldrb	r2, [r2, #4]
 8000606:	4611      	mov	r1, r2
 8000608:	2201      	movs	r2, #1
 800060a:	408a      	lsls	r2, r1
 800060c:	4611      	mov	r1, r2
 800060e:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <GPIO_Init+0x198>)
 8000610:	430b      	orrs	r3, r1
 8000612:	6093      	str	r3, [r2, #8]

			//2.Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <GPIO_Init+0x198>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	7912      	ldrb	r2, [r2, #4]
 800061c:	4611      	mov	r1, r2
 800061e:	2201      	movs	r2, #1
 8000620:	408a      	lsls	r2, r1
 8000622:	4611      	mov	r1, r2
 8000624:	4a25      	ldr	r2, [pc, #148]	; (80006bc <GPIO_Init+0x198>)
 8000626:	430b      	orrs	r3, r1
 8000628:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	089b      	lsrs	r3, r3, #2
 8000630:	74fb      	strb	r3, [r7, #19]
		//this tells us which CR of the SYSCFG_EXTI block we have to access

		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	f003 0303 	and.w	r3, r3, #3
 800063a:	74bb      	strb	r3, [r7, #18]
		// this tells us the bit field to access

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <GPIO_Init+0x19c>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d04e      	beq.n	80006e4 <GPIO_Init+0x1c0>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a1e      	ldr	r2, [pc, #120]	; (80006c4 <GPIO_Init+0x1a0>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d032      	beq.n	80006b6 <GPIO_Init+0x192>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <GPIO_Init+0x1a4>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d02b      	beq.n	80006b2 <GPIO_Init+0x18e>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <GPIO_Init+0x1a8>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d024      	beq.n	80006ae <GPIO_Init+0x18a>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <GPIO_Init+0x1ac>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d01d      	beq.n	80006aa <GPIO_Init+0x186>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <GPIO_Init+0x1b0>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d016      	beq.n	80006a6 <GPIO_Init+0x182>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <GPIO_Init+0x1b4>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d00f      	beq.n	80006a2 <GPIO_Init+0x17e>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <GPIO_Init+0x1b8>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d008      	beq.n	800069e <GPIO_Init+0x17a>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <GPIO_Init+0x1bc>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d101      	bne.n	800069a <GPIO_Init+0x176>
 8000696:	2308      	movs	r3, #8
 8000698:	e025      	b.n	80006e6 <GPIO_Init+0x1c2>
 800069a:	2300      	movs	r3, #0
 800069c:	e023      	b.n	80006e6 <GPIO_Init+0x1c2>
 800069e:	2307      	movs	r3, #7
 80006a0:	e021      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006a2:	2306      	movs	r3, #6
 80006a4:	e01f      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006a6:	2305      	movs	r3, #5
 80006a8:	e01d      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006aa:	2304      	movs	r3, #4
 80006ac:	e01b      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006ae:	2303      	movs	r3, #3
 80006b0:	e019      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006b2:	2302      	movs	r3, #2
 80006b4:	e017      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006b6:	2301      	movs	r3, #1
 80006b8:	e015      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006ba:	bf00      	nop
 80006bc:	40013c00 	.word	0x40013c00
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020400 	.word	0x40020400
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40021400 	.word	0x40021400
 80006d8:	40021800 	.word	0x40021800
 80006dc:	40021c00 	.word	0x40021c00
 80006e0:	40022000 	.word	0x40022000
 80006e4:	2300      	movs	r3, #0
 80006e6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006e8:	4b5c      	ldr	r3, [pc, #368]	; (800085c <GPIO_Init+0x338>)
 80006ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ec:	4a5b      	ldr	r2, [pc, #364]	; (800085c <GPIO_Init+0x338>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80006f4:	7c7a      	ldrb	r2, [r7, #17]
 80006f6:	7cbb      	ldrb	r3, [r7, #18]
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	fa02 f103 	lsl.w	r1, r2, r3
 80006fe:	4a58      	ldr	r2, [pc, #352]	; (8000860 <GPIO_Init+0x33c>)
 8000700:	7cfb      	ldrb	r3, [r7, #19]
 8000702:	3302      	adds	r3, #2
 8000704:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000708:	4b56      	ldr	r3, [pc, #344]	; (8000864 <GPIO_Init+0x340>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	7912      	ldrb	r2, [r2, #4]
 8000710:	4611      	mov	r1, r2
 8000712:	2201      	movs	r2, #1
 8000714:	408a      	lsls	r2, r1
 8000716:	4611      	mov	r1, r2
 8000718:	4a52      	ldr	r2, [pc, #328]	; (8000864 <GPIO_Init+0x340>)
 800071a:	430b      	orrs	r3, r1
 800071c:	6013      	str	r3, [r2, #0]
	/*
	 * SPEED Configuration
	 */

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	799b      	ldrb	r3, [r3, #6]
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	689a      	ldr	r2, [r3, #8]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	2103      	movs	r1, #3
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	400a      	ands	r2, r1
 800074c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	6899      	ldr	r1, [r3, #8]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	430a      	orrs	r2, r1
 800075c:	609a      	str	r2, [r3, #8]

    temp=0;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
    /*
	 * PULL Configuration
	 */

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	79db      	ldrb	r3, [r3, #7]
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	68da      	ldr	r2, [r3, #12]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	2103      	movs	r1, #3
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	43db      	mvns	r3, r3
 8000788:	4619      	mov	r1, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	400a      	ands	r2, r1
 8000790:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	68d9      	ldr	r1, [r3, #12]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	697a      	ldr	r2, [r7, #20]
 800079e:	430a      	orrs	r2, r1
 80007a0:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
	/*
	 * OUTPUT TYPE Configuration
	 */

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7a1b      	ldrb	r3, [r3, #8]
 80007aa:	461a      	mov	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	4619      	mov	r1, r3
 80007c2:	2301      	movs	r3, #1
 80007c4:	408b      	lsls	r3, r1
 80007c6:	43db      	mvns	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	400a      	ands	r2, r1
 80007d0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6859      	ldr	r1, [r3, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	697a      	ldr	r2, [r7, #20]
 80007de:	430a      	orrs	r2, r1
 80007e0:	605a      	str	r2, [r3, #4]

	temp=0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
	 * ALTERNATE MODE Configuration
	 */


	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	795b      	ldrb	r3, [r3, #5]
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d131      	bne.n	8000852 <GPIO_Init+0x32e>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	791b      	ldrb	r3, [r3, #4]
 80007f2:	08db      	lsrs	r3, r3, #3
 80007f4:	743b      	strb	r3, [r7, #16]
		//this is done to decide which register to use, AFRL or AFRH

		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	73fb      	strb	r3, [r7, #15]
		//this done to tell us the bit field to be configured (AFRx) in the Low or High Registers.

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) );
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	7c3a      	ldrb	r2, [r7, #16]
 8000806:	3208      	adds	r2, #8
 8000808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	220f      	movs	r2, #15
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43db      	mvns	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	7c3a      	ldrb	r2, [r7, #16]
 8000820:	4001      	ands	r1, r0
 8000822:	3208      	adds	r2, #8
 8000824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//clearing; (temp2 * 4) tells us teh starting bit position of the bit field that needs configuring

		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	7c3a      	ldrb	r2, [r7, #16]
 800082e:	3208      	adds	r2, #8
 8000830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7a5b      	ldrb	r3, [r3, #9]
 8000838:	461a      	mov	r2, r3
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	4618      	mov	r0, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	7c3a      	ldrb	r2, [r7, #16]
 800084a:	4301      	orrs	r1, r0
 800084c:	3208      	adds	r2, #8
 800084e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40013800 	.word	0x40013800
 8000864:	40013c00 	.word	0x40013c00

08000868 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	691a      	ldr	r2, [r3, #16]
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	fa22 f303 	lsr.w	r3, r2, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]

	return value;
 8000886:	7bfb      	ldrb	r3, [r7, #15]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <SPI_PeriClockControl>:
 *
 * 	@NOTE					   -
 */


void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d12a      	bne.n	80008fc <SPI_PeriClockControl+0x68>

		if(pSPIx == SPI1){
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a2d      	ldr	r2, [pc, #180]	; (8000960 <SPI_PeriClockControl+0xcc>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d106      	bne.n	80008bc <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <SPI_PeriClockControl+0xd0>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	4a2c      	ldr	r2, [pc, #176]	; (8000964 <SPI_PeriClockControl+0xd0>)
 80008b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ba:	e01f      	b.n	80008fc <SPI_PeriClockControl+0x68>
		}

		else if(pSPIx == SPI2){
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a2a      	ldr	r2, [pc, #168]	; (8000968 <SPI_PeriClockControl+0xd4>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d106      	bne.n	80008d2 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <SPI_PeriClockControl+0xd0>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a26      	ldr	r2, [pc, #152]	; (8000964 <SPI_PeriClockControl+0xd0>)
 80008ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	e014      	b.n	80008fc <SPI_PeriClockControl+0x68>
		}

		else if(pSPIx == SPI3){
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a25      	ldr	r2, [pc, #148]	; (800096c <SPI_PeriClockControl+0xd8>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d106      	bne.n	80008e8 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <SPI_PeriClockControl+0xd0>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a21      	ldr	r2, [pc, #132]	; (8000964 <SPI_PeriClockControl+0xd0>)
 80008e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	e009      	b.n	80008fc <SPI_PeriClockControl+0x68>
		}
		else if(pSPIx == SPI4){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a21      	ldr	r2, [pc, #132]	; (8000970 <SPI_PeriClockControl+0xdc>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d105      	bne.n	80008fc <SPI_PeriClockControl+0x68>
			SPI4_PCLK_EN();
 80008f0:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <SPI_PeriClockControl+0xd0>)
 80008f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <SPI_PeriClockControl+0xd0>)
 80008f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008fa:	6453      	str	r3, [r2, #68]	; 0x44
		}

	}
	if (EnorDi == DISABLE){
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d127      	bne.n	8000952 <SPI_PeriClockControl+0xbe>

		if(pSPIx == SPI1){
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a16      	ldr	r2, [pc, #88]	; (8000960 <SPI_PeriClockControl+0xcc>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d105      	bne.n	8000916 <SPI_PeriClockControl+0x82>
			SPI1_PCLK_DI();
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <SPI_PeriClockControl+0xd0>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a15      	ldr	r2, [pc, #84]	; (8000964 <SPI_PeriClockControl+0xd0>)
 8000910:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
		}

		if(pSPIx == SPI2){
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <SPI_PeriClockControl+0xd4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d105      	bne.n	800092a <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <SPI_PeriClockControl+0xd0>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <SPI_PeriClockControl+0xd0>)
 8000924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
		}

		if(pSPIx == SPI3){
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a0f      	ldr	r2, [pc, #60]	; (800096c <SPI_PeriClockControl+0xd8>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d105      	bne.n	800093e <SPI_PeriClockControl+0xaa>
			SPI3_PCLK_DI();
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <SPI_PeriClockControl+0xd0>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <SPI_PeriClockControl+0xd0>)
 8000938:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
		}

		if(pSPIx == SPI4){
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <SPI_PeriClockControl+0xdc>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d105      	bne.n	8000952 <SPI_PeriClockControl+0xbe>
			SPI4_PCLK_DI();
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <SPI_PeriClockControl+0xd0>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a06      	ldr	r2, [pc, #24]	; (8000964 <SPI_PeriClockControl+0xd0>)
 800094c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
		}

	}
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40013000 	.word	0x40013000
 8000964:	40023800 	.word	0x40023800
 8000968:	40003800 	.word	0x40003800
 800096c:	40003c00 	.word	0x40003c00
 8000970:	40013400 	.word	0x40013400

08000974 <SPI_Init>:
 *
 * 	@return					   -
 *
 * 	@NOTE					   -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

	//Enable tyhe peripheral Clock
	SPI_PeriClockControl(pSPIHandle->pSPIx,ENABLE);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2101      	movs	r1, #1
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff86 	bl	8000894 <SPI_PeriClockControl>

	//Let's configure the SPI_CR1 Register

	uint32_t tempreg = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]


	//1. Configure the device mode

	//initializing the device in the SLAVE mode
	tempreg |= pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	791b      	ldrb	r3, [r3, #4]
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4313      	orrs	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]

	//2. Define the bus for it's mode
	if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUSCONGID_FD){
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	795b      	ldrb	r3, [r3, #5]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d104      	bne.n	80009ac <SPI_Init+0x38>

		//Clear the bidimode
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	e014      	b.n	80009d6 <SPI_Init+0x62>
	}else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUSCONGID_HD){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	795b      	ldrb	r3, [r3, #5]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d104      	bne.n	80009be <SPI_Init+0x4a>
		//Enable the bidimode
		tempreg |= (1 <<SPI_CR1_BIDIMODE);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	e00b      	b.n	80009d6 <SPI_Init+0x62>
	}else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUSCONGID_SIMPLEX_RXONLY){
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	795b      	ldrb	r3, [r3, #5]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d107      	bne.n	80009d6 <SPI_Init+0x62>
		//Clear the bidimode and set the RXONLY bit
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009cc:	60fb      	str	r3, [r7, #12]

		tempreg |= (1<<SPI_CR1_RXONLY );
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d4:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the SPI clock for the speed that you desire
	tempreg |= pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	799b      	ldrb	r3, [r3, #6]
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	461a      	mov	r2, r3
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	79db      	ldrb	r3, [r3, #7]
 80009e8:	02db      	lsls	r3, r3, #11
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	7a1b      	ldrb	r3, [r3, #8]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	461a      	mov	r2, r3
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]

	//6.COnfigure the CPHA
	tempreg |= pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	7a5b      	ldrb	r3, [r3, #9]
 8000a04:	461a      	mov	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7a9b      	ldrb	r3, [r3, #10]
 8000a10:	025b      	lsls	r3, r3, #9
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6819      	ldr	r1, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	430a      	orrs	r2, r1
 8000a28:	601a      	str	r2, [r3, #0]

}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <SPI_GetFlagStatus>:

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & FlagName){
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689a      	ldr	r2, [r3, #8]
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e000      	b.n	8000a4e <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <SPI_SendData>:


void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b084      	sub	sp, #16
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	while (len>0){
 8000a66:	e027      	b.n	8000ab8 <SPI_SendData+0x5e>
		//1. Wait till the TXE is set
		while (SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
 8000a68:	bf00      	nop
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f7ff ffe0 	bl	8000a32 <SPI_GetFlagStatus>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f8      	beq.n	8000a6a <SPI_SendData+0x10>

			if (pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00e      	beq.n	8000aa2 <SPI_SendData+0x48>
				//This means the DFF is 16 bits

				//1. Load the DATA to the DR
				pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	60da      	str	r2, [r3, #12]

				//2. Decrement the length TWICE as we just sent 2 bytes of Data
				len--;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
				len--;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]

				//3. Increment the pointer to the TxBuffer TWICE,as we just sent 2 Bytes of data. COnverting to 16 and incrementing once works too
				(uint16_t*)pTxBuffer++;
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	e00a      	b.n	8000ab8 <SPI_SendData+0x5e>
			}
			else {
				//THis means the DFF is 8 bits

				//1. Load the DATA to the DR
				pSPIx->DR = *pTxBuffer;
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	60da      	str	r2, [r3, #12]

				//2. Decrement the length once, as we just sent 1 byte of the data
				len--;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	607b      	str	r3, [r7, #4]

				//3. Increment the pointer to the TxBuffer ,as we just sent 1 Byte of data
				pTxBuffer++;
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
	while (len>0){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1d4      	bne.n	8000a68 <SPI_SendData+0xe>
			}

	}
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SPI_PeripheralControl>:
			}
		}

}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE ){
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d106      	bne.n	8000ae8 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);

	}
}
 8000ae6:	e005      	b.n	8000af4 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SPI_SSOEConfig>:
			pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);

		}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE ){
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d106      	bne.n	8000b20 <SPI_SSOEConfig+0x20>
			pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f043 0204 	orr.w	r2, r3, #4
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	605a      	str	r2, [r3, #4]
		}
		else{
			pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);

		}
}
 8000b1e:	e005      	b.n	8000b2c <SPI_SSOEConfig+0x2c>
			pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f023 0204 	bic.w	r2, r3, #4
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	605a      	str	r2, [r3, #4]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <SystemInit+0x20>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <SystemInit+0x20>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b62:	490e      	ldr	r1, [pc, #56]	; (8000b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b78:	4c0b      	ldr	r4, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b86:	f7ff ffd7 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f000 f811 	bl	8000bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8e:	f7ff fb23 	bl	80001d8 <main>
  bx  lr    
 8000b92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ba0:	08000c24 	.word	0x08000c24
  ldr r2, =_sbss
 8000ba4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ba8:	2000001c 	.word	0x2000001c

08000bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC_IRQHandler>
	...

08000bb0 <__libc_init_array>:
 8000bb0:	b570      	push	{r4, r5, r6, lr}
 8000bb2:	4d0d      	ldr	r5, [pc, #52]	; (8000be8 <__libc_init_array+0x38>)
 8000bb4:	4c0d      	ldr	r4, [pc, #52]	; (8000bec <__libc_init_array+0x3c>)
 8000bb6:	1b64      	subs	r4, r4, r5
 8000bb8:	10a4      	asrs	r4, r4, #2
 8000bba:	2600      	movs	r6, #0
 8000bbc:	42a6      	cmp	r6, r4
 8000bbe:	d109      	bne.n	8000bd4 <__libc_init_array+0x24>
 8000bc0:	4d0b      	ldr	r5, [pc, #44]	; (8000bf0 <__libc_init_array+0x40>)
 8000bc2:	4c0c      	ldr	r4, [pc, #48]	; (8000bf4 <__libc_init_array+0x44>)
 8000bc4:	f000 f818 	bl	8000bf8 <_init>
 8000bc8:	1b64      	subs	r4, r4, r5
 8000bca:	10a4      	asrs	r4, r4, #2
 8000bcc:	2600      	movs	r6, #0
 8000bce:	42a6      	cmp	r6, r4
 8000bd0:	d105      	bne.n	8000bde <__libc_init_array+0x2e>
 8000bd2:	bd70      	pop	{r4, r5, r6, pc}
 8000bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd8:	4798      	blx	r3
 8000bda:	3601      	adds	r6, #1
 8000bdc:	e7ee      	b.n	8000bbc <__libc_init_array+0xc>
 8000bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8000be2:	4798      	blx	r3
 8000be4:	3601      	adds	r6, #1
 8000be6:	e7f2      	b.n	8000bce <__libc_init_array+0x1e>
 8000be8:	08000c1c 	.word	0x08000c1c
 8000bec:	08000c1c 	.word	0x08000c1c
 8000bf0:	08000c1c 	.word	0x08000c1c
 8000bf4:	08000c20 	.word	0x08000c20

08000bf8 <_init>:
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfa:	bf00      	nop
 8000bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfe:	bc08      	pop	{r3}
 8000c00:	469e      	mov	lr, r3
 8000c02:	4770      	bx	lr

08000c04 <_fini>:
 8000c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c06:	bf00      	nop
 8000c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c0a:	bc08      	pop	{r3}
 8000c0c:	469e      	mov	lr, r3
 8000c0e:	4770      	bx	lr
