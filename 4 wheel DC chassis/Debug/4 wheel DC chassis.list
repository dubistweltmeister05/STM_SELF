
4 wheel DC chassis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002c30  08002c30  00012c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c40  08002c40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c40  08002c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c48  08002c48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000180  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000018c  2000018c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009561  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001574  00000000  00000000  0002959d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  0002ab18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a0  00000000  00000000  0002b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002073f  00000000  00000000  0002bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a013  00000000  00000000  0004c43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c84db  00000000  00000000  00056452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e92d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026cc  00000000  00000000  0011e980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c18 	.word	0x08002c18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002c18 	.word	0x08002c18

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SysTick_Handler>:
extern TIM_HandleTypeDef htimer3;
extern TIM_HandleTypeDef htimer4;
extern TIM_HandleTypeDef htimer9;

void SysTick_Handler (void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004d0:	f000 fe1a 	bl	8001108 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004d4:	f000 ff8a 	bl	80013ec <HAL_SYSTICK_IRQHandler>
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer3);
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <TIM3_IRQHandler+0x10>)
 80004e2:	f001 fee7 	bl	80022b4 <HAL_TIM_IRQHandler>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000070 	.word	0x20000070

080004f0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <TIM2_IRQHandler+0x10>)
 80004f6:	f001 fedd 	bl	80022b4 <HAL_TIM_IRQHandler>
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000028 	.word	0x20000028

08000504 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer4);
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <TIM4_IRQHandler+0x10>)
 800050a:	f001 fed3 	bl	80022b4 <HAL_TIM_IRQHandler>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000b8 	.word	0x200000b8

08000518 <TIM1_BRK_TIM9_IRQHandler>:

void TIM1_BRK_TIM9_IRQHandler (void){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer9);
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800051e:	f001 fec9 	bl	80022b4 <HAL_TIM_IRQHandler>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000100 	.word	0x20000100

0800052c <main>:

uint16_t brightness = 0;
/*
 * MAIN CODE
 */
int main (void){
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0


	HAL_Init();
 8000530:	f000 fd98 	bl	8001064 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLK_FREQ_50_MHZ);
 8000534:	2032      	movs	r0, #50	; 0x32
 8000536:	f000 f8f7 	bl	8000728 <SystemClock_Config_HSE>

	button_init();
 800053a:	f000 f89d 	bl	8000678 <button_init>

	enable_init();
 800053e:	f000 f8c7 	bl	80006d0 <enable_init>

	led_init();
 8000542:	f000 fa7f 	bl	8000a44 <led_init>

	timer2_init();
 8000546:	f000 fac1 	bl	8000acc <timer2_init>

	timer3_init();
 800054a:	f000 fb09 	bl	8000b60 <timer3_init>

	timer4_init();
 800054e:	f000 fb53 	bl	8000bf8 <timer4_init>

	timer9_init();
 8000552:	f000 fbd5 	bl	8000d00 <timer9_init>

	if(HAL_TIM_PWM_Start(&htimer4, TIM_CHANNEL_1) !=HAL_OK){
 8000556:	2100      	movs	r1, #0
 8000558:	4839      	ldr	r0, [pc, #228]	; (8000640 <main+0x114>)
 800055a:	f001 fde3 	bl	8002124 <HAL_TIM_PWM_Start>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <main+0x3c>
		Error_Handler();
 8000564:	f000 fa6a 	bl	8000a3c <Error_Handler>
	}
	if(HAL_TIM_PWM_Start(&htimer4, TIM_CHANNEL_2) !=HAL_OK){
 8000568:	2104      	movs	r1, #4
 800056a:	4835      	ldr	r0, [pc, #212]	; (8000640 <main+0x114>)
 800056c:	f001 fdda 	bl	8002124 <HAL_TIM_PWM_Start>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <main+0x4e>
		Error_Handler();
 8000576:	f000 fa61 	bl	8000a3c <Error_Handler>
	}
	if(HAL_TIM_PWM_Start(&htimer4, TIM_CHANNEL_3) !=HAL_OK){
 800057a:	2108      	movs	r1, #8
 800057c:	4830      	ldr	r0, [pc, #192]	; (8000640 <main+0x114>)
 800057e:	f001 fdd1 	bl	8002124 <HAL_TIM_PWM_Start>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <main+0x60>
		Error_Handler();
 8000588:	f000 fa58 	bl	8000a3c <Error_Handler>
	}
	if(HAL_TIM_PWM_Start(&htimer4, TIM_CHANNEL_4) !=HAL_OK){
 800058c:	210c      	movs	r1, #12
 800058e:	482c      	ldr	r0, [pc, #176]	; (8000640 <main+0x114>)
 8000590:	f001 fdc8 	bl	8002124 <HAL_TIM_PWM_Start>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <main+0x72>
		Error_Handler();
 800059a:	f000 fa4f 	bl	8000a3c <Error_Handler>


	while(1){

		//Toggle the speed via user button
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 800059e:	2101      	movs	r1, #1
 80005a0:	4828      	ldr	r0, [pc, #160]	; (8000644 <main+0x118>)
 80005a2:	f001 f8cd 	bl	8001740 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d024      	beq.n	80005f6 <main+0xca>


			brightness=1000;
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <main+0x11c>)
 80005ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b2:	801a      	strh	r2, [r3, #0]
			//Setting PWM Capture/compare value on individual channels of the same timer
			__HAL_TIM_SET_COMPARE(&htimer4,TIM_CHANNEL_1,brightness);
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <main+0x11c>)
 80005b6:	881a      	ldrh	r2, [r3, #0]
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <main+0x114>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 fdc2 	bl	8001148 <HAL_Delay>

			__HAL_TIM_SET_COMPARE(&htimer4,TIM_CHANNEL_2,brightness);
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <main+0x11c>)
 80005c6:	881a      	ldrh	r2, [r3, #0]
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <main+0x114>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 fdba 	bl	8001148 <HAL_Delay>

			__HAL_TIM_SET_COMPARE(&htimer4,TIM_CHANNEL_3,brightness);
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <main+0x11c>)
 80005d6:	881a      	ldrh	r2, [r3, #0]
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <main+0x114>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 fdb2 	bl	8001148 <HAL_Delay>

			__HAL_TIM_SET_COMPARE(&htimer4,TIM_CHANNEL_4,brightness);
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <main+0x11c>)
 80005e6:	881a      	ldrh	r2, [r3, #0]
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <main+0x114>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 fdaa 	bl	8001148 <HAL_Delay>
 80005f4:	e7d3      	b.n	800059e <main+0x72>

		}

		else {
			{
				brightness=250;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <main+0x11c>)
 80005f8:	22fa      	movs	r2, #250	; 0xfa
 80005fa:	801a      	strh	r2, [r3, #0]
				//Setting PWM Capture/compare value on individual channels of the same timer
				__HAL_TIM_SET_COMPARE(&htimer4,TIM_CHANNEL_1,brightness);
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <main+0x11c>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <main+0x114>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f000 fd9e 	bl	8001148 <HAL_Delay>

				__HAL_TIM_SET_COMPARE(&htimer4,TIM_CHANNEL_2,brightness);
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <main+0x11c>)
 800060e:	881a      	ldrh	r2, [r3, #0]
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <main+0x114>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fd96 	bl	8001148 <HAL_Delay>

				__HAL_TIM_SET_COMPARE(&htimer4,TIM_CHANNEL_3,brightness);
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <main+0x11c>)
 800061e:	881a      	ldrh	r2, [r3, #0]
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <main+0x114>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(1);
 8000626:	2001      	movs	r0, #1
 8000628:	f000 fd8e 	bl	8001148 <HAL_Delay>

				__HAL_TIM_SET_COMPARE(&htimer4,TIM_CHANNEL_4,brightness);
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <main+0x11c>)
 800062e:	881a      	ldrh	r2, [r3, #0]
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <main+0x114>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 fd86 	bl	8001148 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 800063c:	e7af      	b.n	800059e <main+0x72>
 800063e:	bf00      	nop
 8000640:	200000b8 	.word	0x200000b8
 8000644:	40020000 	.word	0x40020000
 8000648:	20000184 	.word	0x20000184

0800064c <delay>:

/*
 * IMPLEMENTATION OF ALL USER DEFINED FUNCTIONS APART FROM THE MAIN FUNCTION
 * IN THE ORDER OF THEIR PROTOTYPES
 */
void  delay(){
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
	for (int i=0;i<500000;i++);
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e002      	b.n	800065e <delay+0x12>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <delay+0x28>)
 8000662:	4293      	cmp	r3, r2
 8000664:	ddf8      	ble.n	8000658 <delay+0xc>
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	0007a11f 	.word	0x0007a11f

08000678 <button_init>:

void button_init(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <button_init+0x4c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <button_init+0x4c>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <button_init+0x4c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
	button.Mode = GPIO_MODE_INPUT;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <button_init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
	button.Pin = GPIO_PIN_0;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <button_init+0x50>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	601a      	str	r2, [r3, #0]
	button.Pull = GPIO_NOPULL;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <button_init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
	button.Speed = GPIO_SPEED_FAST;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <button_init+0x50>)
 80006ae:	2202      	movs	r2, #2
 80006b0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &button);
 80006b2:	4905      	ldr	r1, [pc, #20]	; (80006c8 <button_init+0x50>)
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <button_init+0x54>)
 80006b6:	f000 fea7 	bl	8001408 <HAL_GPIO_Init>

}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	2000015c 	.word	0x2000015c
 80006cc:	40020000 	.word	0x40020000

080006d0 <enable_init>:

void enable_init(void){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <enable_init+0x4c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a0f      	ldr	r2, [pc, #60]	; (800071c <enable_init+0x4c>)
 80006e0:	f043 0310 	orr.w	r3, r3, #16
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <enable_init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
	enable.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <enable_init+0x50>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	605a      	str	r2, [r3, #4]
	enable.Pull = GPIO_NOPULL;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <enable_init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
	enable.Speed = GPIO_SPEED_HIGH;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <enable_init+0x50>)
 8000700:	2203      	movs	r2, #3
 8000702:	60da      	str	r2, [r3, #12]
	enable.Pin = GPIO_PIN_7 |GPIO_PIN_8 |\
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <enable_init+0x50>)
 8000706:	f44f 42ff 	mov.w	r2, #32640	; 0x7f80
 800070a:	601a      	str	r2, [r3, #0]
			GPIO_PIN_9 |GPIO_PIN_10 |\
			GPIO_PIN_11 |GPIO_PIN_12 |\
			GPIO_PIN_13 |GPIO_PIN_14 ;
	HAL_GPIO_Init(GPIOE, &enable);
 800070c:	4904      	ldr	r1, [pc, #16]	; (8000720 <enable_init+0x50>)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <enable_init+0x54>)
 8000710:	f000 fe7a 	bl	8001408 <HAL_GPIO_Init>

}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	20000170 	.word	0x20000170
 8000724:	40021000 	.word	0x40021000

08000728 <SystemClock_Config_HSE>:

	void SystemClock_Config_HSE(uint8_t clk_freq){
 8000728:	b580      	push	{r7, lr}
 800072a:	b09a      	sub	sp, #104	; 0x68
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
		RCC_OscInitTypeDef osc_init;
		RCC_ClkInitTypeDef clk_init;

		uint8_t FLatency = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI ;
 8000738:	2303      	movs	r3, #3
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
		osc_init.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
		osc_init.HSIState = RCC_HSI_ON;
 8000742:	2301      	movs	r3, #1
 8000744:	643b      	str	r3, [r7, #64]	; 0x40
		osc_init.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	64fb      	str	r3, [r7, #76]	; 0x4c
		osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074e:	653b      	str	r3, [r7, #80]	; 0x50
		switch (clk_freq){
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2ba8      	cmp	r3, #168	; 0xa8
 8000754:	f000 80dd 	beq.w	8000912 <SystemClock_Config_HSE+0x1ea>
 8000758:	2ba8      	cmp	r3, #168	; 0xa8
 800075a:	f300 8161 	bgt.w	8000a20 <SystemClock_Config_HSE+0x2f8>
 800075e:	2b78      	cmp	r3, #120	; 0x78
 8000760:	f000 8092 	beq.w	8000888 <SystemClock_Config_HSE+0x160>
 8000764:	2b78      	cmp	r3, #120	; 0x78
 8000766:	f300 815b 	bgt.w	8000a20 <SystemClock_Config_HSE+0x2f8>
 800076a:	2b32      	cmp	r3, #50	; 0x32
 800076c:	d002      	beq.n	8000774 <SystemClock_Config_HSE+0x4c>
 800076e:	2b54      	cmp	r3, #84	; 0x54
 8000770:	d045      	beq.n	80007fe <SystemClock_Config_HSE+0xd6>
			delay();
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_RESET);
			break;
		}
		default:
			return;
 8000772:	e155      	b.n	8000a20 <SystemClock_Config_HSE+0x2f8>
			osc_init.PLL.PLLM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	657b      	str	r3, [r7, #84]	; 0x54
			osc_init.PLL.PLLN = 100;
 8000778:	2364      	movs	r3, #100	; 0x64
 800077a:	65bb      	str	r3, [r7, #88]	; 0x58
			osc_init.PLL.PLLP = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	65fb      	str	r3, [r7, #92]	; 0x5c
			osc_init.PLL.PLLQ = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	663b      	str	r3, [r7, #96]	; 0x60
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000784:	230f      	movs	r3, #15
 8000786:	623b      	str	r3, [r7, #32]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
			FLatency = FLASH_ACR_LATENCY_1WS;
 800079c:	2301      	movs	r3, #1
 800079e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			__HAL_RCC_GPIOD_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
 80007a6:	4ba0      	ldr	r3, [pc, #640]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a9f      	ldr	r2, [pc, #636]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b9d      	ldr	r3, [pc, #628]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	61fb      	str	r3, [r7, #28]
 80007bc:	69fb      	ldr	r3, [r7, #28]
			led.Pin = GPIO_PIN_12;
 80007be:	4b9b      	ldr	r3, [pc, #620]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80007c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007c4:	601a      	str	r2, [r3, #0]
			led.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	4b99      	ldr	r3, [pc, #612]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	605a      	str	r2, [r3, #4]
			led.Speed = GPIO_SPEED_FREQ_HIGH;
 80007cc:	4b97      	ldr	r3, [pc, #604]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	60da      	str	r2, [r3, #12]
			led.Pull = GPIO_NOPULL;
 80007d2:	4b96      	ldr	r3, [pc, #600]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
			HAL_GPIO_Init(GPIOD, &led);
 80007d8:	4994      	ldr	r1, [pc, #592]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80007da:	4895      	ldr	r0, [pc, #596]	; (8000a30 <SystemClock_Config_HSE+0x308>)
 80007dc:	f000 fe14 	bl	8001408 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e6:	4892      	ldr	r0, [pc, #584]	; (8000a30 <SystemClock_Config_HSE+0x308>)
 80007e8:	f000 ffc2 	bl	8001770 <HAL_GPIO_WritePin>
			delay();
 80007ec:	f7ff ff2e 	bl	800064c <delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f6:	488e      	ldr	r0, [pc, #568]	; (8000a30 <SystemClock_Config_HSE+0x308>)
 80007f8:	f000 ffba 	bl	8001770 <HAL_GPIO_WritePin>
			break;
 80007fc:	e0eb      	b.n	80009d6 <SystemClock_Config_HSE+0x2ae>
			osc_init.PLL.PLLM = 8;
 80007fe:	2308      	movs	r3, #8
 8000800:	657b      	str	r3, [r7, #84]	; 0x54
			osc_init.PLL.PLLN = 168;
 8000802:	23a8      	movs	r3, #168	; 0xa8
 8000804:	65bb      	str	r3, [r7, #88]	; 0x58
			osc_init.PLL.PLLP = 2;
 8000806:	2302      	movs	r3, #2
 8000808:	65fb      	str	r3, [r7, #92]	; 0x5c
			osc_init.PLL.PLLQ = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	663b      	str	r3, [r7, #96]	; 0x60
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800080e:	230f      	movs	r3, #15
 8000810:	623b      	str	r3, [r7, #32]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	633b      	str	r3, [r7, #48]	; 0x30
			FLatency = FLASH_ACR_LATENCY_2WS;
 8000826:	2302      	movs	r3, #2
 8000828:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			__HAL_RCC_GPIOD_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	4b7d      	ldr	r3, [pc, #500]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a7c      	ldr	r2, [pc, #496]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
 800083c:	4b7a      	ldr	r3, [pc, #488]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 800083e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000840:	f003 0308 	and.w	r3, r3, #8
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	69bb      	ldr	r3, [r7, #24]
			led.Pin = GPIO_PIN_13;
 8000848:	4b78      	ldr	r3, [pc, #480]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 800084a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800084e:	601a      	str	r2, [r3, #0]
			led.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	4b76      	ldr	r3, [pc, #472]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 8000852:	2201      	movs	r2, #1
 8000854:	605a      	str	r2, [r3, #4]
			led.Speed = GPIO_SPEED_FREQ_HIGH;
 8000856:	4b75      	ldr	r3, [pc, #468]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 8000858:	2202      	movs	r2, #2
 800085a:	60da      	str	r2, [r3, #12]
			led.Pull = GPIO_NOPULL;
 800085c:	4b73      	ldr	r3, [pc, #460]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
			HAL_GPIO_Init(GPIOD, &led);
 8000862:	4972      	ldr	r1, [pc, #456]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 8000864:	4872      	ldr	r0, [pc, #456]	; (8000a30 <SystemClock_Config_HSE+0x308>)
 8000866:	f000 fdcf 	bl	8001408 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000870:	486f      	ldr	r0, [pc, #444]	; (8000a30 <SystemClock_Config_HSE+0x308>)
 8000872:	f000 ff7d 	bl	8001770 <HAL_GPIO_WritePin>
			delay();
 8000876:	f7ff fee9 	bl	800064c <delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000880:	486b      	ldr	r0, [pc, #428]	; (8000a30 <SystemClock_Config_HSE+0x308>)
 8000882:	f000 ff75 	bl	8001770 <HAL_GPIO_WritePin>
			break;
 8000886:	e0a6      	b.n	80009d6 <SystemClock_Config_HSE+0x2ae>
			osc_init.PLL.PLLM = 8;
 8000888:	2308      	movs	r3, #8
 800088a:	657b      	str	r3, [r7, #84]	; 0x54
			osc_init.PLL.PLLN = 240;
 800088c:	23f0      	movs	r3, #240	; 0xf0
 800088e:	65bb      	str	r3, [r7, #88]	; 0x58
			osc_init.PLL.PLLP = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	65fb      	str	r3, [r7, #92]	; 0x5c
			osc_init.PLL.PLLQ = 2;
 8000894:	2302      	movs	r3, #2
 8000896:	663b      	str	r3, [r7, #96]	; 0x60
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000898:	230f      	movs	r3, #15
 800089a:	623b      	str	r3, [r7, #32]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2302      	movs	r3, #2
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80008aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
			FLatency = FLASH_ACR_LATENCY_3WS;
 80008b0:	2303      	movs	r3, #3
 80008b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			__HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	4b5b      	ldr	r3, [pc, #364]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a5a      	ldr	r2, [pc, #360]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b58      	ldr	r3, [pc, #352]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
			led.Pin = GPIO_PIN_14;
 80008d2:	4b56      	ldr	r3, [pc, #344]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80008d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d8:	601a      	str	r2, [r3, #0]
			led.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	4b54      	ldr	r3, [pc, #336]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80008dc:	2201      	movs	r2, #1
 80008de:	605a      	str	r2, [r3, #4]
			led.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e0:	4b52      	ldr	r3, [pc, #328]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	60da      	str	r2, [r3, #12]
			led.Pull = GPIO_NOPULL;
 80008e6:	4b51      	ldr	r3, [pc, #324]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
			HAL_GPIO_Init(GPIOD, &led);
 80008ec:	494f      	ldr	r1, [pc, #316]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80008ee:	4850      	ldr	r0, [pc, #320]	; (8000a30 <SystemClock_Config_HSE+0x308>)
 80008f0:	f000 fd8a 	bl	8001408 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fa:	484d      	ldr	r0, [pc, #308]	; (8000a30 <SystemClock_Config_HSE+0x308>)
 80008fc:	f000 ff38 	bl	8001770 <HAL_GPIO_WritePin>
			delay();
 8000900:	f7ff fea4 	bl	800064c <delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800090a:	4849      	ldr	r0, [pc, #292]	; (8000a30 <SystemClock_Config_HSE+0x308>)
 800090c:	f000 ff30 	bl	8001770 <HAL_GPIO_WritePin>
			break;
 8000910:	e061      	b.n	80009d6 <SystemClock_Config_HSE+0x2ae>
			__HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b44      	ldr	r3, [pc, #272]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a43      	ldr	r2, [pc, #268]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b41      	ldr	r3, [pc, #260]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
			__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b40      	ldr	r3, [pc, #256]	; (8000a34 <SystemClock_Config_HSE+0x30c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a3f      	ldr	r2, [pc, #252]	; (8000a34 <SystemClock_Config_HSE+0x30c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	4b3d      	ldr	r3, [pc, #244]	; (8000a34 <SystemClock_Config_HSE+0x30c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
			osc_init.PLL.PLLM = 8;
 800094a:	2308      	movs	r3, #8
 800094c:	657b      	str	r3, [r7, #84]	; 0x54
			osc_init.PLL.PLLN = 336;
 800094e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000952:	65bb      	str	r3, [r7, #88]	; 0x58
			osc_init.PLL.PLLP = 2;
 8000954:	2302      	movs	r3, #2
 8000956:	65fb      	str	r3, [r7, #92]	; 0x5c
			osc_init.PLL.PLLQ = 2;
 8000958:	2302      	movs	r3, #2
 800095a:	663b      	str	r3, [r7, #96]	; 0x60
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800095c:	230f      	movs	r3, #15
 800095e:	623b      	str	r3, [r7, #32]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2302      	movs	r3, #2
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000968:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
			FLatency = FLASH_ACR_LATENCY_5WS;
 8000974:	2305      	movs	r3, #5
 8000976:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			__HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a29      	ldr	r2, [pc, #164]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <SystemClock_Config_HSE+0x300>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
			led.Pin = GPIO_PIN_15;
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 8000998:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800099c:	601a      	str	r2, [r3, #0]
			led.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	605a      	str	r2, [r3, #4]
			led.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	60da      	str	r2, [r3, #12]
			led.Pull = GPIO_NOPULL;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
			HAL_GPIO_Init(GPIOD, &led);
 80009b0:	491e      	ldr	r1, [pc, #120]	; (8000a2c <SystemClock_Config_HSE+0x304>)
 80009b2:	481f      	ldr	r0, [pc, #124]	; (8000a30 <SystemClock_Config_HSE+0x308>)
 80009b4:	f000 fd28 	bl	8001408 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009be:	481c      	ldr	r0, [pc, #112]	; (8000a30 <SystemClock_Config_HSE+0x308>)
 80009c0:	f000 fed6 	bl	8001770 <HAL_GPIO_WritePin>
			delay();
 80009c4:	f7ff fe42 	bl	800064c <delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ce:	4818      	ldr	r0, [pc, #96]	; (8000a30 <SystemClock_Config_HSE+0x308>)
 80009d0:	f000 fece 	bl	8001770 <HAL_GPIO_WritePin>
			break;
 80009d4:	bf00      	nop
		}
		if (HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 80009d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fee2 	bl	80017a4 <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config_HSE+0x2c2>
			Error_Handler();
 80009e6:	f000 f829 	bl	8000a3c <Error_Handler>
		}

		if( HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 80009ea:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 f94d 	bl	8001c94 <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config_HSE+0x2dc>
		{
			Error_Handler();
 8000a00:	f000 f81c 	bl	8000a3c <Error_Handler>
		}
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000a04:	f001 fb32 	bl	800206c <HAL_RCC_GetHCLKFreq>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <SystemClock_Config_HSE+0x310>)
 8000a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a10:	099b      	lsrs	r3, r3, #6
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fcc1 	bl	800139a <HAL_SYSTICK_Config>
		HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000a18:	2004      	movs	r0, #4
 8000a1a:	f000 fccb 	bl	80013b4 <HAL_SYSTICK_CLKSourceConfig>
 8000a1e:	e000      	b.n	8000a22 <SystemClock_Config_HSE+0x2fa>
			return;
 8000a20:	bf00      	nop
	}
 8000a22:	3768      	adds	r7, #104	; 0x68
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	20000148 	.word	0x20000148
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	40007000 	.word	0x40007000
 8000a38:	10624dd3 	.word	0x10624dd3

08000a3c <Error_Handler>:

void Error_Handler(){
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
	while(1);
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x4>
	...

08000a44 <led_init>:
}

void led_init(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	//1. Enabling the clock for the LED GPIOS
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <led_init+0x7c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <led_init+0x7c>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <led_init+0x7c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

	//2. Setting the parameters of the operation
	led.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <led_init+0x80>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	605a      	str	r2, [r3, #4]
	led.Pull = GPIO_NOPULL;
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <led_init+0x80>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
	led.Speed = GPIO_SPEED_FAST;
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <led_init+0x80>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	60da      	str	r2, [r3, #12]

	led.Pin = GPIO_PIN_12;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <led_init+0x80>)
 8000a7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a7e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOD, &led); //green
 8000a80:	4910      	ldr	r1, [pc, #64]	; (8000ac4 <led_init+0x80>)
 8000a82:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <led_init+0x84>)
 8000a84:	f000 fcc0 	bl	8001408 <HAL_GPIO_Init>

	led.Pin = GPIO_PIN_13;
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <led_init+0x80>)
 8000a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOD, &led); //orange
 8000a90:	490c      	ldr	r1, [pc, #48]	; (8000ac4 <led_init+0x80>)
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <led_init+0x84>)
 8000a94:	f000 fcb8 	bl	8001408 <HAL_GPIO_Init>

	led.Pin = GPIO_PIN_14;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <led_init+0x80>)
 8000a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a9e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOD, &led); //red
 8000aa0:	4908      	ldr	r1, [pc, #32]	; (8000ac4 <led_init+0x80>)
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <led_init+0x84>)
 8000aa4:	f000 fcb0 	bl	8001408 <HAL_GPIO_Init>

	led.Pin = GPIO_PIN_15;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <led_init+0x80>)
 8000aaa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aae:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOD, &led); //blue
 8000ab0:	4904      	ldr	r1, [pc, #16]	; (8000ac4 <led_init+0x80>)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <led_init+0x84>)
 8000ab4:	f000 fca8 	bl	8001408 <HAL_GPIO_Init>
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	20000148 	.word	0x20000148
 8000ac8:	40020c00 	.word	0x40020c00

08000acc <timer2_init>:

void timer2_init(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
	htimer2.Instance = TIM2;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <timer2_init+0x8c>)
 8000ad4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad8:	601a      	str	r2, [r3, #0]
	htimer2.Init.Period = 75-1;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <timer2_init+0x8c>)
 8000adc:	224a      	movs	r2, #74	; 0x4a
 8000ade:	60da      	str	r2, [r3, #12]
	htimer2.Init.Prescaler = 4999;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <timer2_init+0x8c>)
 8000ae2:	f241 3287 	movw	r2, #4999	; 0x1387
 8000ae6:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_PWM_Init(&htimer2) != HAL_OK){
 8000ae8:	481b      	ldr	r0, [pc, #108]	; (8000b58 <timer2_init+0x8c>)
 8000aea:	f001 facb 	bl	8002084 <HAL_TIM_PWM_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <timer2_init+0x2c>
		Error_Handler();
 8000af4:	f7ff ffa2 	bl	8000a3c <Error_Handler>
	}

	TIM_OC_InitTypeDef timer2PWM_Config;

	memset(&timer2PWM_Config,0,sizeof(timer2PWM_Config));
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	221c      	movs	r2, #28
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 f882 	bl	8002c08 <memset>

	timer2PWM_Config.OCMode = TIM_OCMODE_PWM1;
 8000b04:	2360      	movs	r3, #96	; 0x60
 8000b06:	607b      	str	r3, [r7, #4]
	timer2PWM_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
	timer2PWM_Config.Pulse = (htimer2.Init.Period * 25)/100;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <timer2_init+0x8c>)
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	4613      	mov	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	009a      	lsls	r2, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <timer2_init+0x90>)
 8000b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b20:	095b      	lsrs	r3, r3, #5
 8000b22:	60bb      	str	r3, [r7, #8]

	//RPWM BTS_1
	if (HAL_TIM_PWM_ConfigChannel(&htimer2,&timer2PWM_Config,TIM_CHANNEL_3) != HAL_OK){
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2208      	movs	r2, #8
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480b      	ldr	r0, [pc, #44]	; (8000b58 <timer2_init+0x8c>)
 8000b2c:	f001 fcca 	bl	80024c4 <HAL_TIM_PWM_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <timer2_init+0x6e>
		Error_Handler();
 8000b36:	f7ff ff81 	bl	8000a3c <Error_Handler>
	}
	//LPWM BTS_1
	if (HAL_TIM_PWM_ConfigChannel(&htimer2,&timer2PWM_Config,TIM_CHANNEL_4) != HAL_OK){
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	220c      	movs	r2, #12
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <timer2_init+0x8c>)
 8000b42:	f001 fcbf 	bl	80024c4 <HAL_TIM_PWM_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <timer2_init+0x84>
		Error_Handler();
 8000b4c:	f7ff ff76 	bl	8000a3c <Error_Handler>
	}

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000028 	.word	0x20000028
 8000b5c:	51eb851f 	.word	0x51eb851f

08000b60 <timer3_init>:

void timer3_init(void){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
	htimer3.Instance = TIM3;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <timer3_init+0x8c>)
 8000b68:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <timer3_init+0x90>)
 8000b6a:	601a      	str	r2, [r3, #0]
	htimer3.Init.Period = 75-1;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <timer3_init+0x8c>)
 8000b6e:	224a      	movs	r2, #74	; 0x4a
 8000b70:	60da      	str	r2, [r3, #12]
	htimer3.Init.Prescaler = 4999;
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <timer3_init+0x8c>)
 8000b74:	f241 3287 	movw	r2, #4999	; 0x1387
 8000b78:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_PWM_Init(&htimer3) != HAL_OK){
 8000b7a:	481c      	ldr	r0, [pc, #112]	; (8000bec <timer3_init+0x8c>)
 8000b7c:	f001 fa82 	bl	8002084 <HAL_TIM_PWM_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <timer3_init+0x2a>
		Error_Handler();
 8000b86:	f7ff ff59 	bl	8000a3c <Error_Handler>
	}

	TIM_OC_InitTypeDef timer3PWM_Config;

	memset(&timer3PWM_Config,0,sizeof(timer3PWM_Config));
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	221c      	movs	r2, #28
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f002 f839 	bl	8002c08 <memset>

	timer3PWM_Config.OCMode = TIM_OCMODE_PWM1;
 8000b96:	2360      	movs	r3, #96	; 0x60
 8000b98:	607b      	str	r3, [r7, #4]
	timer3PWM_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
	timer3PWM_Config.Pulse = (htimer3.Init.Period * 25)/100;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <timer3_init+0x8c>)
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	009a      	lsls	r2, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <timer3_init+0x94>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	60bb      	str	r3, [r7, #8]

	//RPWM BTS_2
	if (HAL_TIM_PWM_ConfigChannel(&htimer3,&timer3PWM_Config,TIM_CHANNEL_1) != HAL_OK){
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <timer3_init+0x8c>)
 8000bbe:	f001 fc81 	bl	80024c4 <HAL_TIM_PWM_ConfigChannel>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <timer3_init+0x6c>
		Error_Handler();
 8000bc8:	f7ff ff38 	bl	8000a3c <Error_Handler>
	}
	//LPWM BTS_2
	if (HAL_TIM_PWM_ConfigChannel(&htimer3,&timer3PWM_Config,TIM_CHANNEL_2) != HAL_OK){
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2204      	movs	r2, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <timer3_init+0x8c>)
 8000bd4:	f001 fc76 	bl	80024c4 <HAL_TIM_PWM_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <timer3_init+0x82>
		Error_Handler();
 8000bde:	f7ff ff2d 	bl	8000a3c <Error_Handler>
	}
}
 8000be2:	bf00      	nop
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000070 	.word	0x20000070
 8000bf0:	40000400 	.word	0x40000400
 8000bf4:	51eb851f 	.word	0x51eb851f

08000bf8 <timer4_init>:

void timer4_init(void){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0

	htimer4.Instance = TIM4;
 8000bfe:	4b3d      	ldr	r3, [pc, #244]	; (8000cf4 <timer4_init+0xfc>)
 8000c00:	4a3d      	ldr	r2, [pc, #244]	; (8000cf8 <timer4_init+0x100>)
 8000c02:	601a      	str	r2, [r3, #0]
	htimer4.Init.Period = 10000-1;
 8000c04:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <timer4_init+0xfc>)
 8000c06:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c0a:	60da      	str	r2, [r3, #12]
	htimer4.Init.Prescaler = 4999;
 8000c0c:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <timer4_init+0xfc>)
 8000c0e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c12:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_PWM_Init(&htimer4) != HAL_OK){
 8000c14:	4837      	ldr	r0, [pc, #220]	; (8000cf4 <timer4_init+0xfc>)
 8000c16:	f001 fa35 	bl	8002084 <HAL_TIM_PWM_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <timer4_init+0x2c>
		Error_Handler();
 8000c20:	f7ff ff0c 	bl	8000a3c <Error_Handler>
	}

	TIM_OC_InitTypeDef timer4PWM_Config;

	memset(&timer4PWM_Config,0,sizeof(timer4PWM_Config));
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	221c      	movs	r2, #28
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 ffec 	bl	8002c08 <memset>

	timer4PWM_Config.OCMode = TIM_OCMODE_PWM1;
 8000c30:	2360      	movs	r3, #96	; 0x60
 8000c32:	607b      	str	r3, [r7, #4]
	timer4PWM_Config.OCNPolarity = TIM_OCPOLARITY_HIGH;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]

	//RPWM BTS_3
	timer4PWM_Config.Pulse = (htimer4.Init.Period * 25)/100;
 8000c38:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <timer4_init+0xfc>)
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	009a      	lsls	r2, r3, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	4a2d      	ldr	r2, [pc, #180]	; (8000cfc <timer4_init+0x104>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	095b      	lsrs	r3, r3, #5
 8000c4e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htimer4, &timer4PWM_Config, TIM_CHANNEL_1) != HAL_OK){
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	4619      	mov	r1, r3
 8000c56:	4827      	ldr	r0, [pc, #156]	; (8000cf4 <timer4_init+0xfc>)
 8000c58:	f001 fc34 	bl	80024c4 <HAL_TIM_PWM_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <timer4_init+0x6e>
		Error_Handler();
 8000c62:	f7ff feeb 	bl	8000a3c <Error_Handler>
	}

	//LPWM BTS_3
	timer4PWM_Config.Pulse = (htimer4.Init.Period * 40)/100;
 8000c66:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <timer4_init+0xfc>)
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <timer4_init+0x104>)
 8000c76:	fba3 2302 	umull	r2, r3, r3, r2
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htimer4, &timer4PWM_Config, TIM_CHANNEL_2) != HAL_OK){
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2204      	movs	r2, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	481b      	ldr	r0, [pc, #108]	; (8000cf4 <timer4_init+0xfc>)
 8000c86:	f001 fc1d 	bl	80024c4 <HAL_TIM_PWM_ConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <timer4_init+0x9c>
		Error_Handler();
 8000c90:	f7ff fed4 	bl	8000a3c <Error_Handler>
	}
	timer4PWM_Config.Pulse = (htimer4.Init.Period * 75)/100;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <timer4_init+0xfc>)
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	011a      	lsls	r2, r3, #4
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <timer4_init+0x104>)
 8000ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca8:	095b      	lsrs	r3, r3, #5
 8000caa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htimer4, &timer4PWM_Config, TIM_CHANNEL_3) != HAL_OK){
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2208      	movs	r2, #8
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4810      	ldr	r0, [pc, #64]	; (8000cf4 <timer4_init+0xfc>)
 8000cb4:	f001 fc06 	bl	80024c4 <HAL_TIM_PWM_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <timer4_init+0xca>
		Error_Handler();
 8000cbe:	f7ff febd 	bl	8000a3c <Error_Handler>
	}
	//LPWM BTS_3
	timer4PWM_Config.Pulse = (htimer4.Init.Period * 90)/100;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <timer4_init+0xfc>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	225a      	movs	r2, #90	; 0x5a
 8000cc8:	fb02 f303 	mul.w	r3, r2, r3
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <timer4_init+0x104>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htimer4, &timer4PWM_Config, TIM_CHANNEL_4) != HAL_OK){
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	220c      	movs	r2, #12
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <timer4_init+0xfc>)
 8000cde:	f001 fbf1 	bl	80024c4 <HAL_TIM_PWM_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <timer4_init+0xf4>
		Error_Handler();
 8000ce8:	f7ff fea8 	bl	8000a3c <Error_Handler>
	}

}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200000b8 	.word	0x200000b8
 8000cf8:	40000800 	.word	0x40000800
 8000cfc:	51eb851f 	.word	0x51eb851f

08000d00 <timer9_init>:

void timer9_init(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
	htimer9.Instance = TIM9;
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <timer9_init+0x8c>)
 8000d08:	4a21      	ldr	r2, [pc, #132]	; (8000d90 <timer9_init+0x90>)
 8000d0a:	601a      	str	r2, [r3, #0]
	htimer9.Init.Period = 75-1;
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <timer9_init+0x8c>)
 8000d0e:	224a      	movs	r2, #74	; 0x4a
 8000d10:	60da      	str	r2, [r3, #12]
	htimer9.Init.Prescaler = 4999;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <timer9_init+0x8c>)
 8000d14:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d18:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_PWM_Init(&htimer9) != HAL_OK){
 8000d1a:	481c      	ldr	r0, [pc, #112]	; (8000d8c <timer9_init+0x8c>)
 8000d1c:	f001 f9b2 	bl	8002084 <HAL_TIM_PWM_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <timer9_init+0x2a>
		Error_Handler();
 8000d26:	f7ff fe89 	bl	8000a3c <Error_Handler>
	}

	TIM_OC_InitTypeDef timer9PWM_Config;

	memset(&timer9PWM_Config,0,sizeof(timer9PWM_Config));
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	221c      	movs	r2, #28
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 ff69 	bl	8002c08 <memset>

	timer9PWM_Config.OCMode = TIM_OCMODE_PWM1;
 8000d36:	2360      	movs	r3, #96	; 0x60
 8000d38:	607b      	str	r3, [r7, #4]
	timer9PWM_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
	timer9PWM_Config.Pulse = (htimer9.Init.Period * 25)/100;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <timer9_init+0x8c>)
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	009a      	lsls	r2, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <timer9_init+0x94>)
 8000d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	60bb      	str	r3, [r7, #8]

	//RPWM BTS_2
	if (HAL_TIM_PWM_ConfigChannel(&htimer9,&timer9PWM_Config,TIM_CHANNEL_1) != HAL_OK){
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <timer9_init+0x8c>)
 8000d5e:	f001 fbb1 	bl	80024c4 <HAL_TIM_PWM_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <timer9_init+0x6c>
		Error_Handler();
 8000d68:	f7ff fe68 	bl	8000a3c <Error_Handler>
	}
	//LPWM BTS_2
	if (HAL_TIM_PWM_ConfigChannel(&htimer9,&timer9PWM_Config,TIM_CHANNEL_2) != HAL_OK){
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2204      	movs	r2, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <timer9_init+0x8c>)
 8000d74:	f001 fba6 	bl	80024c4 <HAL_TIM_PWM_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <timer9_init+0x82>
		Error_Handler();
 8000d7e:	f7ff fe5d 	bl	8000a3c <Error_Handler>
	}
}
 8000d82:	bf00      	nop
 8000d84:	3720      	adds	r7, #32
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000100 	.word	0x20000100
 8000d90:	40014000 	.word	0x40014000
 8000d94:	51eb851f 	.word	0x51eb851f

08000d98 <HAL_MspInit>:

#include "main.h"
#include "stm32f4xx.h"
#include "stm32f407xx.h"
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 fac7 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_MspInit+0x40>)
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <HAL_MspInit+0x40>)
 8000da8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000dac:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	f06f 000b 	mvn.w	r0, #11
 8000db6:	f000 fac6 	bl	8001346 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	f06f 000a 	mvn.w	r0, #10
 8000dc2:	f000 fac0 	bl	8001346 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f06f 0009 	mvn.w	r0, #9
 8000dce:	f000 faba 	bl	8001346 <HAL_NVIC_SetPriority>
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b09e      	sub	sp, #120	; 0x78
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	//1. enable the clock for the peripherals needed

	/*
	 * CLOCKS FOR THE TIMERS
	 */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
 8000de8:	4b7b      	ldr	r3, [pc, #492]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a7a      	ldr	r2, [pc, #488]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
 8000df4:	4b78      	ldr	r3, [pc, #480]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_TIM3_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
 8000e04:	4b74      	ldr	r3, [pc, #464]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a73      	ldr	r2, [pc, #460]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b71      	ldr	r3, [pc, #452]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	623b      	str	r3, [r7, #32]
 8000e1a:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_TIM4_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
 8000e20:	4b6d      	ldr	r3, [pc, #436]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a6c      	ldr	r2, [pc, #432]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b6a      	ldr	r3, [pc, #424]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	61fb      	str	r3, [r7, #28]
 8000e36:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_TIM9_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	4b66      	ldr	r3, [pc, #408]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e40:	4a65      	ldr	r2, [pc, #404]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e46:	6453      	str	r3, [r2, #68]	; 0x44
 8000e48:	4b63      	ldr	r3, [pc, #396]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	69bb      	ldr	r3, [r7, #24]

	/*
	 * CLOCKS FOR THE GPIOS
	 */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	4b5f      	ldr	r3, [pc, #380]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a5e      	ldr	r2, [pc, #376]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b5c      	ldr	r3, [pc, #368]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	4b58      	ldr	r3, [pc, #352]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a57      	ldr	r2, [pc, #348]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e80:	4b55      	ldr	r3, [pc, #340]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	4b51      	ldr	r3, [pc, #324]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	4a50      	ldr	r2, [pc, #320]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9c:	4b4e      	ldr	r3, [pc, #312]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x1fc>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	f003 0310 	and.w	r3, r3, #16
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
	 *
	 * PA2  -->channel 3
	 * PA3  -->channel 4
	 */
	GPIO_InitTypeDef timer2PWM_gpio;
	timer2PWM_gpio.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	66bb      	str	r3, [r7, #104]	; 0x68
	timer2PWM_gpio.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	66fb      	str	r3, [r7, #108]	; 0x6c
	timer2PWM_gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	673b      	str	r3, [r7, #112]	; 0x70
	timer2PWM_gpio.Alternate = GPIO_AF1_TIM2;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	677b      	str	r3, [r7, #116]	; 0x74

	timer2PWM_gpio.Pin = GPIO_PIN_2;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	667b      	str	r3, [r7, #100]	; 0x64
	HAL_GPIO_Init(GPIOA,&timer2PWM_gpio);
 8000ebc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4846      	ldr	r0, [pc, #280]	; (8000fdc <HAL_TIM_PWM_MspInit+0x200>)
 8000ec4:	f000 faa0 	bl	8001408 <HAL_GPIO_Init>

	timer2PWM_gpio.Pin = GPIO_PIN_3;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	667b      	str	r3, [r7, #100]	; 0x64
	HAL_GPIO_Init(GPIOA,&timer2PWM_gpio);
 8000ecc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4842      	ldr	r0, [pc, #264]	; (8000fdc <HAL_TIM_PWM_MspInit+0x200>)
 8000ed4:	f000 fa98 	bl	8001408 <HAL_GPIO_Init>
	 *
	 * PB4  -->channel 1
	 * PB5  -->channel 2
	 */
	GPIO_InitTypeDef timer3PWM_gpio;
	timer3PWM_gpio.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	657b      	str	r3, [r7, #84]	; 0x54
	timer3PWM_gpio.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	65bb      	str	r3, [r7, #88]	; 0x58
	timer3PWM_gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
	timer3PWM_gpio.Alternate = GPIO_AF2_TIM3;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	663b      	str	r3, [r7, #96]	; 0x60

	timer3PWM_gpio.Pin = GPIO_PIN_4;
 8000ee8:	2310      	movs	r3, #16
 8000eea:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_Init(GPIOB, &timer3PWM_gpio);
 8000eec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	483b      	ldr	r0, [pc, #236]	; (8000fe0 <HAL_TIM_PWM_MspInit+0x204>)
 8000ef4:	f000 fa88 	bl	8001408 <HAL_GPIO_Init>

	timer3PWM_gpio.Pin = GPIO_PIN_5;
 8000ef8:	2320      	movs	r3, #32
 8000efa:	653b      	str	r3, [r7, #80]	; 0x50
	HAL_GPIO_Init(GPIOB, &timer3PWM_gpio);
 8000efc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f00:	4619      	mov	r1, r3
 8000f02:	4837      	ldr	r0, [pc, #220]	; (8000fe0 <HAL_TIM_PWM_MspInit+0x204>)
 8000f04:	f000 fa80 	bl	8001408 <HAL_GPIO_Init>
	 *
	 * PB6  -->channel 1
	 * PB7  -->channel 2
	 */
	GPIO_InitTypeDef timer4PWM_gpio;
	timer4PWM_gpio.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
	timer4PWM_gpio.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	647b      	str	r3, [r7, #68]	; 0x44
	timer4PWM_gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	64bb      	str	r3, [r7, #72]	; 0x48
	timer4PWM_gpio.Alternate = GPIO_AF2_TIM4;
 8000f14:	2302      	movs	r3, #2
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c

	timer4PWM_gpio.Pin = GPIO_PIN_12;
 8000f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &timer4PWM_gpio);
 8000f1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f22:	4619      	mov	r1, r3
 8000f24:	482f      	ldr	r0, [pc, #188]	; (8000fe4 <HAL_TIM_PWM_MspInit+0x208>)
 8000f26:	f000 fa6f 	bl	8001408 <HAL_GPIO_Init>

	timer4PWM_gpio.Pin = GPIO_PIN_13;
 8000f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &timer4PWM_gpio);
 8000f30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f34:	4619      	mov	r1, r3
 8000f36:	482b      	ldr	r0, [pc, #172]	; (8000fe4 <HAL_TIM_PWM_MspInit+0x208>)
 8000f38:	f000 fa66 	bl	8001408 <HAL_GPIO_Init>

	timer4PWM_gpio.Pin = GPIO_PIN_14;
 8000f3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f40:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &timer4PWM_gpio);
 8000f42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f46:	4619      	mov	r1, r3
 8000f48:	4826      	ldr	r0, [pc, #152]	; (8000fe4 <HAL_TIM_PWM_MspInit+0x208>)
 8000f4a:	f000 fa5d 	bl	8001408 <HAL_GPIO_Init>

	timer4PWM_gpio.Pin = GPIO_PIN_15;
 8000f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &timer4PWM_gpio);
 8000f54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4822      	ldr	r0, [pc, #136]	; (8000fe4 <HAL_TIM_PWM_MspInit+0x208>)
 8000f5c:	f000 fa54 	bl	8001408 <HAL_GPIO_Init>
	 *
	 * PE5  -->channel 1
	 * PE6   -->channel 2
	 */
	GPIO_InitTypeDef timer9PWM_gpio;
	timer9PWM_gpio.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
	timer9PWM_gpio.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
	timer9PWM_gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
	timer9PWM_gpio.Alternate = GPIO_AF3_TIM9;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	63bb      	str	r3, [r7, #56]	; 0x38

	timer9PWM_gpio.Pin = GPIO_PIN_5;
 8000f70:	2320      	movs	r3, #32
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE,&timer9PWM_gpio);
 8000f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	481b      	ldr	r0, [pc, #108]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x20c>)
 8000f7c:	f000 fa44 	bl	8001408 <HAL_GPIO_Init>

	timer9PWM_gpio.Pin = GPIO_PIN_6;
 8000f80:	2340      	movs	r3, #64	; 0x40
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE,&timer9PWM_gpio);
 8000f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4817      	ldr	r0, [pc, #92]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x20c>)
 8000f8c:	f000 fa3c 	bl	8001408 <HAL_GPIO_Init>

	//3. Configure the NVIC settings
	HAL_NVIC_SetPriority(TIM2_IRQn, 15,0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	210f      	movs	r1, #15
 8000f94:	201c      	movs	r0, #28
 8000f96:	f000 f9d6 	bl	8001346 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f9a:	201c      	movs	r0, #28
 8000f9c:	f000 f9ef 	bl	800137e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(TIM3_IRQn, 15,0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	201d      	movs	r0, #29
 8000fa6:	f000 f9ce 	bl	8001346 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000faa:	201d      	movs	r0, #29
 8000fac:	f000 f9e7 	bl	800137e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(TIM4_IRQn, 15,0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	201e      	movs	r0, #30
 8000fb6:	f000 f9c6 	bl	8001346 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fba:	201e      	movs	r0, #30
 8000fbc:	f000 f9df 	bl	800137e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 15,0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	2018      	movs	r0, #24
 8000fc6:	f000 f9be 	bl	8001346 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000fca:	2018      	movs	r0, #24
 8000fcc:	f000 f9d7 	bl	800137e <HAL_NVIC_EnableIRQ>

}
 8000fd0:	bf00      	nop
 8000fd2:	3778      	adds	r7, #120	; 0x78
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020c00 	.word	0x40020c00
 8000fe8:	40021000 	.word	0x40021000

08000fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001048 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001016:	490e      	ldr	r1, [pc, #56]	; (8001050 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800102c:	4c0b      	ldr	r4, [pc, #44]	; (800105c <LoopFillZerobss+0x26>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800103a:	f7ff ffd7 	bl	8000fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103e:	f001 fdbf 	bl	8002bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fa73 	bl	800052c <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001054:	08002c50 	.word	0x08002c50
  ldr r2, =_sbss
 8001058:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800105c:	2000018c 	.word	0x2000018c

08001060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <HAL_Init+0x40>)
 800106e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_Init+0x40>)
 800107a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_Init+0x40>)
 8001086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f94f 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	2000      	movs	r0, #0
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fe7e 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023c00 	.word	0x40023c00

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f967 	bl	800139a <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f92f 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000008 	.word	0x20000008
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000188 	.word	0x20000188

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000188 	.word	0x20000188

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff29 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff3e 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff31 	bl	80011f4 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa2 	bl	80012ec <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d106      	bne.n	80013d0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80013ce:	e005      	b.n	80013dc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013d6:	f023 0304 	bic.w	r3, r3, #4
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80013f0:	f000 f802 	bl	80013f8 <HAL_SYSTICK_Callback>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	e16b      	b.n	80016fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 815a 	bne.w	80016f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d005      	beq.n	800145a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001456:	2b02      	cmp	r3, #2
 8001458:	d130      	bne.n	80014bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 0201 	and.w	r2, r3, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d017      	beq.n	80014f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d123      	bne.n	800154c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	69b9      	ldr	r1, [r7, #24]
 8001548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80b4 	beq.w	80016f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b60      	ldr	r3, [pc, #384]	; (8001714 <HAL_GPIO_Init+0x30c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a5f      	ldr	r2, [pc, #380]	; (8001714 <HAL_GPIO_Init+0x30c>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <HAL_GPIO_Init+0x30c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015aa:	4a5b      	ldr	r2, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x310>)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <HAL_GPIO_Init+0x314>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d02b      	beq.n	800162e <HAL_GPIO_Init+0x226>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a51      	ldr	r2, [pc, #324]	; (8001720 <HAL_GPIO_Init+0x318>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d025      	beq.n	800162a <HAL_GPIO_Init+0x222>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a50      	ldr	r2, [pc, #320]	; (8001724 <HAL_GPIO_Init+0x31c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d01f      	beq.n	8001626 <HAL_GPIO_Init+0x21e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4f      	ldr	r2, [pc, #316]	; (8001728 <HAL_GPIO_Init+0x320>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d019      	beq.n	8001622 <HAL_GPIO_Init+0x21a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4e      	ldr	r2, [pc, #312]	; (800172c <HAL_GPIO_Init+0x324>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0x216>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4d      	ldr	r2, [pc, #308]	; (8001730 <HAL_GPIO_Init+0x328>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00d      	beq.n	800161a <HAL_GPIO_Init+0x212>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4c      	ldr	r2, [pc, #304]	; (8001734 <HAL_GPIO_Init+0x32c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x20e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4b      	ldr	r2, [pc, #300]	; (8001738 <HAL_GPIO_Init+0x330>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_GPIO_Init+0x20a>
 800160e:	2307      	movs	r3, #7
 8001610:	e00e      	b.n	8001630 <HAL_GPIO_Init+0x228>
 8001612:	2308      	movs	r3, #8
 8001614:	e00c      	b.n	8001630 <HAL_GPIO_Init+0x228>
 8001616:	2306      	movs	r3, #6
 8001618:	e00a      	b.n	8001630 <HAL_GPIO_Init+0x228>
 800161a:	2305      	movs	r3, #5
 800161c:	e008      	b.n	8001630 <HAL_GPIO_Init+0x228>
 800161e:	2304      	movs	r3, #4
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x228>
 8001622:	2303      	movs	r3, #3
 8001624:	e004      	b.n	8001630 <HAL_GPIO_Init+0x228>
 8001626:	2302      	movs	r3, #2
 8001628:	e002      	b.n	8001630 <HAL_GPIO_Init+0x228>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_GPIO_Init+0x228>
 800162e:	2300      	movs	r3, #0
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	f002 0203 	and.w	r2, r2, #3
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	4093      	lsls	r3, r2
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001640:	4935      	ldr	r1, [pc, #212]	; (8001718 <HAL_GPIO_Init+0x310>)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_GPIO_Init+0x334>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001672:	4a32      	ldr	r2, [pc, #200]	; (800173c <HAL_GPIO_Init+0x334>)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <HAL_GPIO_Init+0x334>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800169c:	4a27      	ldr	r2, [pc, #156]	; (800173c <HAL_GPIO_Init+0x334>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <HAL_GPIO_Init+0x334>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c6:	4a1d      	ldr	r2, [pc, #116]	; (800173c <HAL_GPIO_Init+0x334>)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_GPIO_Init+0x334>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <HAL_GPIO_Init+0x334>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3301      	adds	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	2b0f      	cmp	r3, #15
 8001700:	f67f ae90 	bls.w	8001424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	40013800 	.word	0x40013800
 800171c:	40020000 	.word	0x40020000
 8001720:	40020400 	.word	0x40020400
 8001724:	40020800 	.word	0x40020800
 8001728:	40020c00 	.word	0x40020c00
 800172c:	40021000 	.word	0x40021000
 8001730:	40021400 	.word	0x40021400
 8001734:	40021800 	.word	0x40021800
 8001738:	40021c00 	.word	0x40021c00
 800173c:	40013c00 	.word	0x40013c00

08001740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	887b      	ldrh	r3, [r7, #2]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e001      	b.n	8001762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800178c:	e003      	b.n	8001796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	041a      	lsls	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e267      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d075      	beq.n	80018ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017c2:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d00c      	beq.n	80017e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ce:	4b85      	ldr	r3, [pc, #532]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d112      	bne.n	8001800 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017da:	4b82      	ldr	r3, [pc, #520]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017e6:	d10b      	bne.n	8001800 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	4b7e      	ldr	r3, [pc, #504]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d05b      	beq.n	80018ac <HAL_RCC_OscConfig+0x108>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d157      	bne.n	80018ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e242      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001808:	d106      	bne.n	8001818 <HAL_RCC_OscConfig+0x74>
 800180a:	4b76      	ldr	r3, [pc, #472]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a75      	ldr	r2, [pc, #468]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e01d      	b.n	8001854 <HAL_RCC_OscConfig+0xb0>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x98>
 8001822:	4b70      	ldr	r3, [pc, #448]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a6f      	ldr	r2, [pc, #444]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b6d      	ldr	r3, [pc, #436]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a6c      	ldr	r2, [pc, #432]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e00b      	b.n	8001854 <HAL_RCC_OscConfig+0xb0>
 800183c:	4b69      	ldr	r3, [pc, #420]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a68      	ldr	r2, [pc, #416]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b66      	ldr	r3, [pc, #408]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a65      	ldr	r2, [pc, #404]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 800184e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fc68 	bl	8001130 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff fc64 	bl	8001130 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e207      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b5b      	ldr	r3, [pc, #364]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0xc0>
 8001882:	e014      	b.n	80018ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fc54 	bl	8001130 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fc50 	bl	8001130 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e1f3      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189e:	4b51      	ldr	r3, [pc, #324]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0xe8>
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d063      	beq.n	8001982 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ba:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c6:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d11c      	bne.n	800190c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018d2:	4b44      	ldr	r3, [pc, #272]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d116      	bne.n	800190c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018de:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_RCC_OscConfig+0x152>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e1c7      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4937      	ldr	r1, [pc, #220]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190a:	e03a      	b.n	8001982 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001914:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <HAL_RCC_OscConfig+0x244>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191a:	f7ff fc09 	bl	8001130 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff fc05 	bl	8001130 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e1a8      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001934:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001940:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4925      	ldr	r1, [pc, #148]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
 8001954:	e015      	b.n	8001982 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_RCC_OscConfig+0x244>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff fbe8 	bl	8001130 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001964:	f7ff fbe4 	bl	8001130 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e187      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d036      	beq.n	80019fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d016      	beq.n	80019c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_RCC_OscConfig+0x248>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff fbc8 	bl	8001130 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff fbc4 	bl	8001130 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e167      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_OscConfig+0x240>)
 80019b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x200>
 80019c2:	e01b      	b.n	80019fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_RCC_OscConfig+0x248>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fbb1 	bl	8001130 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d0:	e00e      	b.n	80019f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d2:	f7ff fbad 	bl	8001130 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d907      	bls.n	80019f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e150      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
 80019e4:	40023800 	.word	0x40023800
 80019e8:	42470000 	.word	0x42470000
 80019ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	4b88      	ldr	r3, [pc, #544]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 80019f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1ea      	bne.n	80019d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8097 	beq.w	8001b38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0e:	4b81      	ldr	r3, [pc, #516]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10f      	bne.n	8001a3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	4b7d      	ldr	r3, [pc, #500]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a7c      	ldr	r2, [pc, #496]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b7a      	ldr	r3, [pc, #488]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a36:	2301      	movs	r3, #1
 8001a38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3a:	4b77      	ldr	r3, [pc, #476]	; (8001c18 <HAL_RCC_OscConfig+0x474>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d118      	bne.n	8001a78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a46:	4b74      	ldr	r3, [pc, #464]	; (8001c18 <HAL_RCC_OscConfig+0x474>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a73      	ldr	r2, [pc, #460]	; (8001c18 <HAL_RCC_OscConfig+0x474>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fb6d 	bl	8001130 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5a:	f7ff fb69 	bl	8001130 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e10c      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <HAL_RCC_OscConfig+0x474>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x2ea>
 8001a80:	4b64      	ldr	r3, [pc, #400]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	4a63      	ldr	r2, [pc, #396]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8c:	e01c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x324>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x30c>
 8001a96:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9a:	4a5e      	ldr	r2, [pc, #376]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa2:	4b5c      	ldr	r3, [pc, #368]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa6:	4a5b      	ldr	r2, [pc, #364]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6713      	str	r3, [r2, #112]	; 0x70
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x324>
 8001ab0:	4b58      	ldr	r3, [pc, #352]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	4a57      	ldr	r2, [pc, #348]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6713      	str	r3, [r2, #112]	; 0x70
 8001abc:	4b55      	ldr	r3, [pc, #340]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac0:	4a54      	ldr	r2, [pc, #336]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	f023 0304 	bic.w	r3, r3, #4
 8001ac6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d015      	beq.n	8001afc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fb2e 	bl	8001130 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad8:	f7ff fb2a 	bl	8001130 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0cb      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aee:	4b49      	ldr	r3, [pc, #292]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0ee      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x334>
 8001afa:	e014      	b.n	8001b26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afc:	f7ff fb18 	bl	8001130 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7ff fb14 	bl	8001130 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e0b5      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1a:	4b3e      	ldr	r3, [pc, #248]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1ee      	bne.n	8001b04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2c:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	4a38      	ldr	r2, [pc, #224]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a1 	beq.w	8001c84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b42:	4b34      	ldr	r3, [pc, #208]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d05c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d141      	bne.n	8001bda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	4b31      	ldr	r3, [pc, #196]	; (8001c1c <HAL_RCC_OscConfig+0x478>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fae8 	bl	8001130 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff fae4 	bl	8001130 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e087      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b76:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69da      	ldr	r2, [r3, #28]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	019b      	lsls	r3, r3, #6
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	085b      	lsrs	r3, r3, #1
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	491b      	ldr	r1, [pc, #108]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_RCC_OscConfig+0x478>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fabd 	bl	8001130 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bba:	f7ff fab9 	bl	8001130 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e05c      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x416>
 8001bd8:	e054      	b.n	8001c84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_RCC_OscConfig+0x478>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff faa6 	bl	8001130 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff faa2 	bl	8001130 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e045      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x444>
 8001c06:	e03d      	b.n	8001c84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e038      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <HAL_RCC_OscConfig+0x4ec>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d028      	beq.n	8001c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d121      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d11a      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c50:	4013      	ands	r3, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d111      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	085b      	lsrs	r3, r3, #1
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d107      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800

08001c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0cc      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b68      	ldr	r3, [pc, #416]	; (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d90c      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0b8      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d020      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce8:	4b59      	ldr	r3, [pc, #356]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a58      	ldr	r2, [pc, #352]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d00:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4a52      	ldr	r2, [pc, #328]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0c:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	494d      	ldr	r1, [pc, #308]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d044      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d119      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e07f      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d003      	beq.n	8001d52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e06f      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d62:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e067      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d72:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f023 0203 	bic.w	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4934      	ldr	r1, [pc, #208]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d84:	f7ff f9d4 	bl	8001130 <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8c:	f7ff f9d0 	bl	8001130 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e04f      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 020c 	and.w	r2, r3, #12
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d1eb      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d20c      	bcs.n	8001ddc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e032      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4916      	ldr	r1, [pc, #88]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d009      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	490e      	ldr	r1, [pc, #56]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e1a:	f000 f821 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	490a      	ldr	r1, [pc, #40]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	5ccb      	ldrb	r3, [r1, r3]
 8001e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e32:	4a09      	ldr	r2, [pc, #36]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f934 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023c00 	.word	0x40023c00
 8001e50:	40023800 	.word	0x40023800
 8001e54:	08002c30 	.word	0x08002c30
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e64:	b094      	sub	sp, #80	; 0x50
 8001e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e70:	2300      	movs	r3, #0
 8001e72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e78:	4b79      	ldr	r3, [pc, #484]	; (8002060 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d00d      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x40>
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	f200 80e1 	bhi.w	800204c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x34>
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d003      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e92:	e0db      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e94:	4b73      	ldr	r3, [pc, #460]	; (8002064 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e98:	e0db      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e9a:	4b73      	ldr	r3, [pc, #460]	; (8002068 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e9e:	e0d8      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ea8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eaa:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d063      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb6:	4b6a      	ldr	r3, [pc, #424]	; (8002060 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	099b      	lsrs	r3, r3, #6
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ec0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eca:	2300      	movs	r3, #0
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ece:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ed2:	4622      	mov	r2, r4
 8001ed4:	462b      	mov	r3, r5
 8001ed6:	f04f 0000 	mov.w	r0, #0
 8001eda:	f04f 0100 	mov.w	r1, #0
 8001ede:	0159      	lsls	r1, r3, #5
 8001ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ee4:	0150      	lsls	r0, r2, #5
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4621      	mov	r1, r4
 8001eec:	1a51      	subs	r1, r2, r1
 8001eee:	6139      	str	r1, [r7, #16]
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f04:	4659      	mov	r1, fp
 8001f06:	018b      	lsls	r3, r1, #6
 8001f08:	4651      	mov	r1, sl
 8001f0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f0e:	4651      	mov	r1, sl
 8001f10:	018a      	lsls	r2, r1, #6
 8001f12:	4651      	mov	r1, sl
 8001f14:	ebb2 0801 	subs.w	r8, r2, r1
 8001f18:	4659      	mov	r1, fp
 8001f1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f32:	4690      	mov	r8, r2
 8001f34:	4699      	mov	r9, r3
 8001f36:	4623      	mov	r3, r4
 8001f38:	eb18 0303 	adds.w	r3, r8, r3
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	462b      	mov	r3, r5
 8001f40:	eb49 0303 	adc.w	r3, r9, r3
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f52:	4629      	mov	r1, r5
 8001f54:	024b      	lsls	r3, r1, #9
 8001f56:	4621      	mov	r1, r4
 8001f58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f5c:	4621      	mov	r1, r4
 8001f5e:	024a      	lsls	r2, r1, #9
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f66:	2200      	movs	r2, #0
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f70:	f7fe f92a 	bl	80001c8 <__aeabi_uldivmod>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4613      	mov	r3, r2
 8001f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f7c:	e058      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	099b      	lsrs	r3, r3, #6
 8001f84:	2200      	movs	r2, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	4611      	mov	r1, r2
 8001f8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f8e:	623b      	str	r3, [r7, #32]
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f98:	4642      	mov	r2, r8
 8001f9a:	464b      	mov	r3, r9
 8001f9c:	f04f 0000 	mov.w	r0, #0
 8001fa0:	f04f 0100 	mov.w	r1, #0
 8001fa4:	0159      	lsls	r1, r3, #5
 8001fa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001faa:	0150      	lsls	r0, r2, #5
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4641      	mov	r1, r8
 8001fb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fb6:	4649      	mov	r1, r9
 8001fb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fd0:	ebb2 040a 	subs.w	r4, r2, sl
 8001fd4:	eb63 050b 	sbc.w	r5, r3, fp
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	00eb      	lsls	r3, r5, #3
 8001fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fe6:	00e2      	lsls	r2, r4, #3
 8001fe8:	4614      	mov	r4, r2
 8001fea:	461d      	mov	r5, r3
 8001fec:	4643      	mov	r3, r8
 8001fee:	18e3      	adds	r3, r4, r3
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	464b      	mov	r3, r9
 8001ff4:	eb45 0303 	adc.w	r3, r5, r3
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002006:	4629      	mov	r1, r5
 8002008:	028b      	lsls	r3, r1, #10
 800200a:	4621      	mov	r1, r4
 800200c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002010:	4621      	mov	r1, r4
 8002012:	028a      	lsls	r2, r1, #10
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800201a:	2200      	movs	r2, #0
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	61fa      	str	r2, [r7, #28]
 8002020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002024:	f7fe f8d0 	bl	80001c8 <__aeabi_uldivmod>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4613      	mov	r3, r2
 800202e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_GetSysClockFreq+0x200>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	0c1b      	lsrs	r3, r3, #16
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	3301      	adds	r3, #1
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002040:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800204a:	e002      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_RCC_GetSysClockFreq+0x204>)
 800204e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002054:	4618      	mov	r0, r3
 8002056:	3750      	adds	r7, #80	; 0x50
 8002058:	46bd      	mov	sp, r7
 800205a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	00f42400 	.word	0x00f42400
 8002068:	007a1200 	.word	0x007a1200

0800206c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <HAL_RCC_GetHCLKFreq+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000000 	.word	0x20000000

08002084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e041      	b.n	800211a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fe96 	bl	8000ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f000 faf2 	bl	80026ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_TIM_PWM_Start+0x24>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e022      	b.n	800218e <HAL_TIM_PWM_Start+0x6a>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b04      	cmp	r3, #4
 800214c:	d109      	bne.n	8002162 <HAL_TIM_PWM_Start+0x3e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	bf14      	ite	ne
 800215a:	2301      	movne	r3, #1
 800215c:	2300      	moveq	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	e015      	b.n	800218e <HAL_TIM_PWM_Start+0x6a>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d109      	bne.n	800217c <HAL_TIM_PWM_Start+0x58>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	e008      	b.n	800218e <HAL_TIM_PWM_Start+0x6a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e07c      	b.n	8002290 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d104      	bne.n	80021a6 <HAL_TIM_PWM_Start+0x82>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a4:	e013      	b.n	80021ce <HAL_TIM_PWM_Start+0xaa>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d104      	bne.n	80021b6 <HAL_TIM_PWM_Start+0x92>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b4:	e00b      	b.n	80021ce <HAL_TIM_PWM_Start+0xaa>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d104      	bne.n	80021c6 <HAL_TIM_PWM_Start+0xa2>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c4:	e003      	b.n	80021ce <HAL_TIM_PWM_Start+0xaa>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2201      	movs	r2, #1
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fcb8 	bl	8002b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2d      	ldr	r2, [pc, #180]	; (8002298 <HAL_TIM_PWM_Start+0x174>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d004      	beq.n	80021f0 <HAL_TIM_PWM_Start+0xcc>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a2c      	ldr	r2, [pc, #176]	; (800229c <HAL_TIM_PWM_Start+0x178>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d101      	bne.n	80021f4 <HAL_TIM_PWM_Start+0xd0>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_TIM_PWM_Start+0xd2>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a22      	ldr	r2, [pc, #136]	; (8002298 <HAL_TIM_PWM_Start+0x174>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d022      	beq.n	800225a <HAL_TIM_PWM_Start+0x136>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221c:	d01d      	beq.n	800225a <HAL_TIM_PWM_Start+0x136>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_TIM_PWM_Start+0x17c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d018      	beq.n	800225a <HAL_TIM_PWM_Start+0x136>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <HAL_TIM_PWM_Start+0x180>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_TIM_PWM_Start+0x136>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <HAL_TIM_PWM_Start+0x184>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00e      	beq.n	800225a <HAL_TIM_PWM_Start+0x136>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a16      	ldr	r2, [pc, #88]	; (800229c <HAL_TIM_PWM_Start+0x178>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d009      	beq.n	800225a <HAL_TIM_PWM_Start+0x136>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a18      	ldr	r2, [pc, #96]	; (80022ac <HAL_TIM_PWM_Start+0x188>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d004      	beq.n	800225a <HAL_TIM_PWM_Start+0x136>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a16      	ldr	r2, [pc, #88]	; (80022b0 <HAL_TIM_PWM_Start+0x18c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d111      	bne.n	800227e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b06      	cmp	r3, #6
 800226a:	d010      	beq.n	800228e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227c:	e007      	b.n	800228e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0201 	orr.w	r2, r2, #1
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40010000 	.word	0x40010000
 800229c:	40010400 	.word	0x40010400
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40000800 	.word	0x40000800
 80022a8:	40000c00 	.word	0x40000c00
 80022ac:	40014000 	.word	0x40014000
 80022b0:	40001800 	.word	0x40001800

080022b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d122      	bne.n	8002310 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d11b      	bne.n	8002310 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0202 	mvn.w	r2, #2
 80022e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f9ba 	bl	8002670 <HAL_TIM_IC_CaptureCallback>
 80022fc:	e005      	b.n	800230a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f9ac 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f9bd 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b04      	cmp	r3, #4
 800231c:	d122      	bne.n	8002364 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b04      	cmp	r3, #4
 800232a:	d11b      	bne.n	8002364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0204 	mvn.w	r2, #4
 8002334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2202      	movs	r2, #2
 800233a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f990 	bl	8002670 <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f982 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f993 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b08      	cmp	r3, #8
 8002370:	d122      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b08      	cmp	r3, #8
 800237e:	d11b      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0208 	mvn.w	r2, #8
 8002388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2204      	movs	r2, #4
 800238e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f966 	bl	8002670 <HAL_TIM_IC_CaptureCallback>
 80023a4:	e005      	b.n	80023b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f958 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f969 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d122      	bne.n	800240c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d11b      	bne.n	800240c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0210 	mvn.w	r2, #16
 80023dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2208      	movs	r2, #8
 80023e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f93c 	bl	8002670 <HAL_TIM_IC_CaptureCallback>
 80023f8:	e005      	b.n	8002406 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f92e 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f93f 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b01      	cmp	r3, #1
 8002418:	d10e      	bne.n	8002438 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0201 	mvn.w	r2, #1
 8002430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f908 	bl	8002648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002442:	2b80      	cmp	r3, #128	; 0x80
 8002444:	d10e      	bne.n	8002464 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b80      	cmp	r3, #128	; 0x80
 8002452:	d107      	bne.n	8002464 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800245c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fba3 	bl	8002baa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d10e      	bne.n	8002490 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247c:	2b40      	cmp	r3, #64	; 0x40
 800247e:	d107      	bne.n	8002490 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f904 	bl	8002698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b20      	cmp	r3, #32
 800249c:	d10e      	bne.n	80024bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d107      	bne.n	80024bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0220 	mvn.w	r2, #32
 80024b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fb6d 	bl	8002b96 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024de:	2302      	movs	r3, #2
 80024e0:	e0ae      	b.n	8002640 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	f200 809f 	bhi.w	8002630 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80024f2:	a201      	add	r2, pc, #4	; (adr r2, 80024f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f8:	0800252d 	.word	0x0800252d
 80024fc:	08002631 	.word	0x08002631
 8002500:	08002631 	.word	0x08002631
 8002504:	08002631 	.word	0x08002631
 8002508:	0800256d 	.word	0x0800256d
 800250c:	08002631 	.word	0x08002631
 8002510:	08002631 	.word	0x08002631
 8002514:	08002631 	.word	0x08002631
 8002518:	080025af 	.word	0x080025af
 800251c:	08002631 	.word	0x08002631
 8002520:	08002631 	.word	0x08002631
 8002524:	08002631 	.word	0x08002631
 8002528:	080025ef 	.word	0x080025ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f95a 	bl	80027ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0208 	orr.w	r2, r2, #8
 8002546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0204 	bic.w	r2, r2, #4
 8002556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6999      	ldr	r1, [r3, #24]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	619a      	str	r2, [r3, #24]
      break;
 800256a:	e064      	b.n	8002636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f9aa 	bl	80028cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6999      	ldr	r1, [r3, #24]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	021a      	lsls	r2, r3, #8
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	619a      	str	r2, [r3, #24]
      break;
 80025ac:	e043      	b.n	8002636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 f9ff 	bl	80029b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0208 	orr.w	r2, r2, #8
 80025c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0204 	bic.w	r2, r2, #4
 80025d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69d9      	ldr	r1, [r3, #28]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	61da      	str	r2, [r3, #28]
      break;
 80025ec:	e023      	b.n	8002636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fa53 	bl	8002aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69d9      	ldr	r1, [r3, #28]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	021a      	lsls	r2, r3, #8
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	61da      	str	r2, [r3, #28]
      break;
 800262e:	e002      	b.n	8002636 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	75fb      	strb	r3, [r7, #23]
      break;
 8002634:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800263e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a40      	ldr	r2, [pc, #256]	; (80027c0 <TIM_Base_SetConfig+0x114>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d013      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ca:	d00f      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a3d      	ldr	r2, [pc, #244]	; (80027c4 <TIM_Base_SetConfig+0x118>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00b      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a3c      	ldr	r2, [pc, #240]	; (80027c8 <TIM_Base_SetConfig+0x11c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d007      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a3b      	ldr	r2, [pc, #236]	; (80027cc <TIM_Base_SetConfig+0x120>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d003      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a3a      	ldr	r2, [pc, #232]	; (80027d0 <TIM_Base_SetConfig+0x124>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d108      	bne.n	80026fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a2f      	ldr	r2, [pc, #188]	; (80027c0 <TIM_Base_SetConfig+0x114>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d02b      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270c:	d027      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a2c      	ldr	r2, [pc, #176]	; (80027c4 <TIM_Base_SetConfig+0x118>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d023      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a2b      	ldr	r2, [pc, #172]	; (80027c8 <TIM_Base_SetConfig+0x11c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01f      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a2a      	ldr	r2, [pc, #168]	; (80027cc <TIM_Base_SetConfig+0x120>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01b      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a29      	ldr	r2, [pc, #164]	; (80027d0 <TIM_Base_SetConfig+0x124>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d017      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a28      	ldr	r2, [pc, #160]	; (80027d4 <TIM_Base_SetConfig+0x128>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a27      	ldr	r2, [pc, #156]	; (80027d8 <TIM_Base_SetConfig+0x12c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00f      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a26      	ldr	r2, [pc, #152]	; (80027dc <TIM_Base_SetConfig+0x130>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00b      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a25      	ldr	r2, [pc, #148]	; (80027e0 <TIM_Base_SetConfig+0x134>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d007      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a24      	ldr	r2, [pc, #144]	; (80027e4 <TIM_Base_SetConfig+0x138>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d003      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a23      	ldr	r2, [pc, #140]	; (80027e8 <TIM_Base_SetConfig+0x13c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d108      	bne.n	8002770 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <TIM_Base_SetConfig+0x114>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d003      	beq.n	80027a4 <TIM_Base_SetConfig+0xf8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <TIM_Base_SetConfig+0x124>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d103      	bne.n	80027ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	615a      	str	r2, [r3, #20]
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40010000 	.word	0x40010000
 80027c4:	40000400 	.word	0x40000400
 80027c8:	40000800 	.word	0x40000800
 80027cc:	40000c00 	.word	0x40000c00
 80027d0:	40010400 	.word	0x40010400
 80027d4:	40014000 	.word	0x40014000
 80027d8:	40014400 	.word	0x40014400
 80027dc:	40014800 	.word	0x40014800
 80027e0:	40001800 	.word	0x40001800
 80027e4:	40001c00 	.word	0x40001c00
 80027e8:	40002000 	.word	0x40002000

080027ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	f023 0201 	bic.w	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 0303 	bic.w	r3, r3, #3
 8002822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f023 0302 	bic.w	r3, r3, #2
 8002834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a20      	ldr	r2, [pc, #128]	; (80028c4 <TIM_OC1_SetConfig+0xd8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d003      	beq.n	8002850 <TIM_OC1_SetConfig+0x64>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <TIM_OC1_SetConfig+0xdc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d10c      	bne.n	800286a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f023 0308 	bic.w	r3, r3, #8
 8002856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f023 0304 	bic.w	r3, r3, #4
 8002868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a15      	ldr	r2, [pc, #84]	; (80028c4 <TIM_OC1_SetConfig+0xd8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d003      	beq.n	800287a <TIM_OC1_SetConfig+0x8e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <TIM_OC1_SetConfig+0xdc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d111      	bne.n	800289e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	621a      	str	r2, [r3, #32]
}
 80028b8:	bf00      	nop
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	40010000 	.word	0x40010000
 80028c8:	40010400 	.word	0x40010400

080028cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	f023 0210 	bic.w	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f023 0320 	bic.w	r3, r3, #32
 8002916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <TIM_OC2_SetConfig+0xe4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d003      	beq.n	8002934 <TIM_OC2_SetConfig+0x68>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a21      	ldr	r2, [pc, #132]	; (80029b4 <TIM_OC2_SetConfig+0xe8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d10d      	bne.n	8002950 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800293a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800294e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a17      	ldr	r2, [pc, #92]	; (80029b0 <TIM_OC2_SetConfig+0xe4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d003      	beq.n	8002960 <TIM_OC2_SetConfig+0x94>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a16      	ldr	r2, [pc, #88]	; (80029b4 <TIM_OC2_SetConfig+0xe8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d113      	bne.n	8002988 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800296e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	621a      	str	r2, [r3, #32]
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40010000 	.word	0x40010000
 80029b4:	40010400 	.word	0x40010400

080029b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0303 	bic.w	r3, r3, #3
 80029ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a21      	ldr	r2, [pc, #132]	; (8002a98 <TIM_OC3_SetConfig+0xe0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d003      	beq.n	8002a1e <TIM_OC3_SetConfig+0x66>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a20      	ldr	r2, [pc, #128]	; (8002a9c <TIM_OC3_SetConfig+0xe4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d10d      	bne.n	8002a3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a16      	ldr	r2, [pc, #88]	; (8002a98 <TIM_OC3_SetConfig+0xe0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d003      	beq.n	8002a4a <TIM_OC3_SetConfig+0x92>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a15      	ldr	r2, [pc, #84]	; (8002a9c <TIM_OC3_SetConfig+0xe4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d113      	bne.n	8002a72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	621a      	str	r2, [r3, #32]
}
 8002a8c:	bf00      	nop
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40010000 	.word	0x40010000
 8002a9c:	40010400 	.word	0x40010400

08002aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	031b      	lsls	r3, r3, #12
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <TIM_OC4_SetConfig+0xa4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d003      	beq.n	8002b08 <TIM_OC4_SetConfig+0x68>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <TIM_OC4_SetConfig+0xa8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d109      	bne.n	8002b1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	019b      	lsls	r3, r3, #6
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	621a      	str	r2, [r3, #32]
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40010000 	.word	0x40010000
 8002b48:	40010400 	.word	0x40010400

08002b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2201      	movs	r2, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a1a      	ldr	r2, [r3, #32]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	401a      	ands	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a1a      	ldr	r2, [r3, #32]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <__libc_init_array>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	4d0d      	ldr	r5, [pc, #52]	; (8002bf8 <__libc_init_array+0x38>)
 8002bc4:	4c0d      	ldr	r4, [pc, #52]	; (8002bfc <__libc_init_array+0x3c>)
 8002bc6:	1b64      	subs	r4, r4, r5
 8002bc8:	10a4      	asrs	r4, r4, #2
 8002bca:	2600      	movs	r6, #0
 8002bcc:	42a6      	cmp	r6, r4
 8002bce:	d109      	bne.n	8002be4 <__libc_init_array+0x24>
 8002bd0:	4d0b      	ldr	r5, [pc, #44]	; (8002c00 <__libc_init_array+0x40>)
 8002bd2:	4c0c      	ldr	r4, [pc, #48]	; (8002c04 <__libc_init_array+0x44>)
 8002bd4:	f000 f820 	bl	8002c18 <_init>
 8002bd8:	1b64      	subs	r4, r4, r5
 8002bda:	10a4      	asrs	r4, r4, #2
 8002bdc:	2600      	movs	r6, #0
 8002bde:	42a6      	cmp	r6, r4
 8002be0:	d105      	bne.n	8002bee <__libc_init_array+0x2e>
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be8:	4798      	blx	r3
 8002bea:	3601      	adds	r6, #1
 8002bec:	e7ee      	b.n	8002bcc <__libc_init_array+0xc>
 8002bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf2:	4798      	blx	r3
 8002bf4:	3601      	adds	r6, #1
 8002bf6:	e7f2      	b.n	8002bde <__libc_init_array+0x1e>
 8002bf8:	08002c48 	.word	0x08002c48
 8002bfc:	08002c48 	.word	0x08002c48
 8002c00:	08002c48 	.word	0x08002c48
 8002c04:	08002c4c 	.word	0x08002c4c

08002c08 <memset>:
 8002c08:	4402      	add	r2, r0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d100      	bne.n	8002c12 <memset+0xa>
 8002c10:	4770      	bx	lr
 8002c12:	f803 1b01 	strb.w	r1, [r3], #1
 8002c16:	e7f9      	b.n	8002c0c <memset+0x4>

08002c18 <_init>:
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1a:	bf00      	nop
 8002c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1e:	bc08      	pop	{r3}
 8002c20:	469e      	mov	lr, r3
 8002c22:	4770      	bx	lr

08002c24 <_fini>:
 8002c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c26:	bf00      	nop
 8002c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2a:	bc08      	pop	{r3}
 8002c2c:	469e      	mov	lr, r3
 8002c2e:	4770      	bx	lr
