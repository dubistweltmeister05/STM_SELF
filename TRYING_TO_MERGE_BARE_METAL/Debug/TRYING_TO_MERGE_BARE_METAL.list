
TRYING_TO_MERGE_BARE_METAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000730  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008b8  080008c0  000108c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008b8  080008b8  000108c0  2**0
                  CONTENTS
  4 .ARM          00000000  080008b8  080008b8  000108c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008b8  080008c0  000108c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008b8  080008b8  000108b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008bc  080008bc  000108bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000108c0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000108c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f89  00000000  00000000  000108f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003e7  00000000  00000000  00011879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00011c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000b0  00000000  00000000  00011d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ea1f  00000000  00000000  00011df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001543  00000000  00000000  00030817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bcf20  00000000  00000000  00031d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000eec7a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002a4  00000000  00000000  000eeccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080008a0 	.word	0x080008a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080008a0 	.word	0x080008a0

080001c8 <delay>:
 *  Created on: 25-Jul-2023
 *      Author: wardawg
 */
#include "stm32f407xx.h"
//#include "stm2f407_gpio_driver.h"
void delay() {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 50000; i++)
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d9f7      	bls.n	80001d4 <delay+0xc>
		;
}
 80001e4:	bf00      	nop
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
	...

080001f4 <main>:
int main(void) {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLED;
	GpioLED.pGPIOx = GPIOD;
 80001fa:	4b27      	ldr	r3, [pc, #156]	; (8000298 <main+0xa4>)
 80001fc:	60fb      	str	r3, [r7, #12]
	GpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80001fe:	230c      	movs	r3, #12
 8000200:	743b      	strb	r3, [r7, #16]
	GpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000202:	2300      	movs	r3, #0
 8000204:	753b      	strb	r3, [r7, #20]
	GpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000206:	2301      	movs	r3, #1
 8000208:	747b      	strb	r3, [r7, #17]
	GpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800020a:	2302      	movs	r3, #2
 800020c:	74bb      	strb	r3, [r7, #18]
	GpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GpioLED);
 8000212:	f107 030c 	add.w	r3, r7, #12
 8000216:	4618      	mov	r0, r3
 8000218:	f000 f92a 	bl	8000470 <GPIO_Init>

	GpioLED.GPIO_PinConfig.GPIO_PinNumber =GPIO_PIN_NO_13;
 800021c:	230d      	movs	r3, #13
 800021e:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GpioLED);
 8000220:	f107 030c 	add.w	r3, r7, #12
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f923 	bl	8000470 <GPIO_Init>

	GpioLED.GPIO_PinConfig.GPIO_PinNumber =GPIO_PIN_NO_14;
 800022a:	230e      	movs	r3, #14
 800022c:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GpioLED);
 800022e:	f107 030c 	add.w	r3, r7, #12
 8000232:	4618      	mov	r0, r3
 8000234:	f000 f91c 	bl	8000470 <GPIO_Init>

	GpioLED.GPIO_PinConfig.GPIO_PinNumber =GPIO_PIN_NO_15;
 8000238:	230f      	movs	r3, #15
 800023a:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GpioLED);
 800023c:	f107 030c 	add.w	r3, r7, #12
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f915 	bl	8000470 <GPIO_Init>

	GPIO_Handle_t Button;
	Button.pGPIOx = GPIOA;
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <main+0xa8>)
 8000248:	603b      	str	r3, [r7, #0]
	Button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800024a:	2300      	movs	r3, #0
 800024c:	717b      	strb	r3, [r7, #5]
	Button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800024e:	2300      	movs	r3, #0
 8000250:	713b      	strb	r3, [r7, #4]
	Button.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000252:	2302      	movs	r3, #2
 8000254:	71bb      	strb	r3, [r7, #6]
	Button.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000256:	2300      	movs	r3, #0
 8000258:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(&Button);
 800025a:	463b      	mov	r3, r7
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f907 	bl	8000470 <GPIO_Init>

	while (1) {

		delay();
 8000262:	f7ff ffb1 	bl	80001c8 <delay>
		GPIO_ToggleOutputPin(GPIOD,GPIO_PIN_NO_12);
 8000266:	210c      	movs	r1, #12
 8000268:	480b      	ldr	r0, [pc, #44]	; (8000298 <main+0xa4>)
 800026a:	f000 faa3 	bl	80007b4 <GPIO_ToggleOutputPin>
		delay();
 800026e:	f7ff ffab 	bl	80001c8 <delay>
		GPIO_ToggleOutputPin(GPIOD,GPIO_PIN_NO_13);
 8000272:	210d      	movs	r1, #13
 8000274:	4808      	ldr	r0, [pc, #32]	; (8000298 <main+0xa4>)
 8000276:	f000 fa9d 	bl	80007b4 <GPIO_ToggleOutputPin>
		delay();
 800027a:	f7ff ffa5 	bl	80001c8 <delay>
		GPIO_ToggleOutputPin(GPIOD,GPIO_PIN_NO_14);
 800027e:	210e      	movs	r1, #14
 8000280:	4805      	ldr	r0, [pc, #20]	; (8000298 <main+0xa4>)
 8000282:	f000 fa97 	bl	80007b4 <GPIO_ToggleOutputPin>
		delay();
 8000286:	f7ff ff9f 	bl	80001c8 <delay>
		GPIO_ToggleOutputPin(GPIOD,GPIO_PIN_NO_15);
 800028a:	210f      	movs	r1, #15
 800028c:	4802      	ldr	r0, [pc, #8]	; (8000298 <main+0xa4>)
 800028e:	f000 fa91 	bl	80007b4 <GPIO_ToggleOutputPin>
		delay();
 8000292:	f7ff ff99 	bl	80001c8 <delay>
		delay();
 8000296:	e7e4      	b.n	8000262 <main+0x6e>
 8000298:	40020c00 	.word	0x40020c00
 800029c:	40020000 	.word	0x40020000

080002a0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002ac:	78fb      	ldrb	r3, [r7, #3]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d162      	bne.n	8000378 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a64      	ldr	r2, [pc, #400]	; (8000448 <GPIO_PeriClockControl+0x1a8>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d106      	bne.n	80002c8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002ba:	4b64      	ldr	r3, [pc, #400]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002be:	4a63      	ldr	r2, [pc, #396]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 80002c6:	e0b9      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a61      	ldr	r2, [pc, #388]	; (8000450 <GPIO_PeriClockControl+0x1b0>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d106      	bne.n	80002de <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002d0:	4b5e      	ldr	r3, [pc, #376]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d4:	4a5d      	ldr	r2, [pc, #372]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002d6:	f043 0302 	orr.w	r3, r3, #2
 80002da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002dc:	e0ae      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a5c      	ldr	r2, [pc, #368]	; (8000454 <GPIO_PeriClockControl+0x1b4>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002e6:	4b59      	ldr	r3, [pc, #356]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	4a58      	ldr	r2, [pc, #352]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f2:	e0a3      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a58      	ldr	r2, [pc, #352]	; (8000458 <GPIO_PeriClockControl+0x1b8>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d106      	bne.n	800030a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002fc:	4b53      	ldr	r3, [pc, #332]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000300:	4a52      	ldr	r2, [pc, #328]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000308:	e098      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a53      	ldr	r2, [pc, #332]	; (800045c <GPIO_PeriClockControl+0x1bc>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000312:	4b4e      	ldr	r3, [pc, #312]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000316:	4a4d      	ldr	r2, [pc, #308]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000318:	f043 0310 	orr.w	r3, r3, #16
 800031c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031e:	e08d      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a4f      	ldr	r2, [pc, #316]	; (8000460 <GPIO_PeriClockControl+0x1c0>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d106      	bne.n	8000336 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000328:	4b48      	ldr	r3, [pc, #288]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032c:	4a47      	ldr	r2, [pc, #284]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000334:	e082      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a4a      	ldr	r2, [pc, #296]	; (8000464 <GPIO_PeriClockControl+0x1c4>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800033e:	4b43      	ldr	r3, [pc, #268]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	4a42      	ldr	r2, [pc, #264]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000348:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034a:	e077      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a46      	ldr	r2, [pc, #280]	; (8000468 <GPIO_PeriClockControl+0x1c8>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000354:	4b3d      	ldr	r3, [pc, #244]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a3c      	ldr	r2, [pc, #240]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800035a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000360:	e06c      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a41      	ldr	r2, [pc, #260]	; (800046c <GPIO_PeriClockControl+0x1cc>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d168      	bne.n	800043c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800036a:	4b38      	ldr	r3, [pc, #224]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a37      	ldr	r2, [pc, #220]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000376:	e061      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a33      	ldr	r2, [pc, #204]	; (8000448 <GPIO_PeriClockControl+0x1a8>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000380:	4b32      	ldr	r3, [pc, #200]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000384:	4a31      	ldr	r2, [pc, #196]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000386:	f023 0301 	bic.w	r3, r3, #1
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038c:	e056      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a2f      	ldr	r2, [pc, #188]	; (8000450 <GPIO_PeriClockControl+0x1b0>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000396:	4b2d      	ldr	r3, [pc, #180]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a2c      	ldr	r2, [pc, #176]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800039c:	f023 0302 	bic.w	r3, r3, #2
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a2:	e04b      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a2b      	ldr	r2, [pc, #172]	; (8000454 <GPIO_PeriClockControl+0x1b4>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80003ac:	4b27      	ldr	r3, [pc, #156]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a26      	ldr	r2, [pc, #152]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003b2:	f023 0304 	bic.w	r3, r3, #4
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b8:	e040      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a26      	ldr	r2, [pc, #152]	; (8000458 <GPIO_PeriClockControl+0x1b8>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80003c2:	4b22      	ldr	r3, [pc, #136]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a21      	ldr	r2, [pc, #132]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003c8:	f023 0308 	bic.w	r3, r3, #8
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ce:	e035      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a22      	ldr	r2, [pc, #136]	; (800045c <GPIO_PeriClockControl+0x1bc>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80003d8:	4b1c      	ldr	r3, [pc, #112]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a1b      	ldr	r2, [pc, #108]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003de:	f023 0310 	bic.w	r3, r3, #16
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	e02a      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a1d      	ldr	r2, [pc, #116]	; (8000460 <GPIO_PeriClockControl+0x1c0>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a16      	ldr	r2, [pc, #88]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003f4:	f023 0320 	bic.w	r3, r3, #32
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e01f      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a19      	ldr	r2, [pc, #100]	; (8000464 <GPIO_PeriClockControl+0x1c4>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a10      	ldr	r2, [pc, #64]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800040a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e014      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a14      	ldr	r2, [pc, #80]	; (8000468 <GPIO_PeriClockControl+0x1c8>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a0b      	ldr	r2, [pc, #44]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e009      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a10      	ldr	r2, [pc, #64]	; (800046c <GPIO_PeriClockControl+0x1cc>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d105      	bne.n	800043c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a05      	ldr	r2, [pc, #20]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000436:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40020000 	.word	0x40020000
 800044c:	40023800 	.word	0x40023800
 8000450:	40020400 	.word	0x40020400
 8000454:	40020800 	.word	0x40020800
 8000458:	40020c00 	.word	0x40020c00
 800045c:	40021000 	.word	0x40021000
 8000460:	40021400 	.word	0x40021400
 8000464:	40021800 	.word	0x40021800
 8000468:	40021c00 	.word	0x40021c00
 800046c:	40022000 	.word	0x40022000

08000470 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; //temp. register
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2101      	movs	r1, #1
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff0c 	bl	80002a0 <GPIO_PeriClockControl>
	 * Mode Configuration
	 */

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	2b03      	cmp	r3, #3
 800048e:	d820      	bhi.n	80004d2 <GPIO_Init+0x62>
	{
		//the non interrupt mode

		//writing the pinmode at appropriate bits of MODER
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	795b      	ldrb	r3, [r3, #5]
 8000494:	461a      	mov	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	791b      	ldrb	r3, [r3, #4]
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	617b      	str	r3, [r7, #20]

		//clearing any pre-set bits
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	2103      	movs	r1, #3
 80004b0:	fa01 f303 	lsl.w	r3, r1, r3
 80004b4:	43db      	mvns	r3, r3
 80004b6:	4619      	mov	r1, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	400a      	ands	r2, r1
 80004be:	601a      	str	r2, [r3, #0]

		//setting the value already loaded in temp.
		pGPIOHandle->pGPIOx->MODER |= temp;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	6819      	ldr	r1, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	697a      	ldr	r2, [r7, #20]
 80004cc:	430a      	orrs	r2, r1
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	e0cb      	b.n	800066a <GPIO_Init+0x1fa>
	}else
	{
		//this part is the interrupt mode, so special coding is needed

		//1. Select the triggering mechanism
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) //Falling edge triggering
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	795b      	ldrb	r3, [r3, #5]
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	d117      	bne.n	800050a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004da:	4b4b      	ldr	r3, [pc, #300]	; (8000608 <GPIO_Init+0x198>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	7912      	ldrb	r2, [r2, #4]
 80004e2:	4611      	mov	r1, r2
 80004e4:	2201      	movs	r2, #1
 80004e6:	408a      	lsls	r2, r1
 80004e8:	4611      	mov	r1, r2
 80004ea:	4a47      	ldr	r2, [pc, #284]	; (8000608 <GPIO_Init+0x198>)
 80004ec:	430b      	orrs	r3, r1
 80004ee:	60d3      	str	r3, [r2, #12]

			//2.Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f0:	4b45      	ldr	r3, [pc, #276]	; (8000608 <GPIO_Init+0x198>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	7912      	ldrb	r2, [r2, #4]
 80004f8:	4611      	mov	r1, r2
 80004fa:	2201      	movs	r2, #1
 80004fc:	408a      	lsls	r2, r1
 80004fe:	43d2      	mvns	r2, r2
 8000500:	4611      	mov	r1, r2
 8000502:	4a41      	ldr	r2, [pc, #260]	; (8000608 <GPIO_Init+0x198>)
 8000504:	400b      	ands	r3, r1
 8000506:	6093      	str	r3, [r2, #8]
 8000508:	e035      	b.n	8000576 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) //Rising edge triggering
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	795b      	ldrb	r3, [r3, #5]
 800050e:	2b05      	cmp	r3, #5
 8000510:	d117      	bne.n	8000542 <GPIO_Init+0xd2>
		{
			//1.configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000512:	4b3d      	ldr	r3, [pc, #244]	; (8000608 <GPIO_Init+0x198>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	7912      	ldrb	r2, [r2, #4]
 800051a:	4611      	mov	r1, r2
 800051c:	2201      	movs	r2, #1
 800051e:	408a      	lsls	r2, r1
 8000520:	4611      	mov	r1, r2
 8000522:	4a39      	ldr	r2, [pc, #228]	; (8000608 <GPIO_Init+0x198>)
 8000524:	430b      	orrs	r3, r1
 8000526:	6093      	str	r3, [r2, #8]

			//2.Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000528:	4b37      	ldr	r3, [pc, #220]	; (8000608 <GPIO_Init+0x198>)
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	7912      	ldrb	r2, [r2, #4]
 8000530:	4611      	mov	r1, r2
 8000532:	2201      	movs	r2, #1
 8000534:	408a      	lsls	r2, r1
 8000536:	43d2      	mvns	r2, r2
 8000538:	4611      	mov	r1, r2
 800053a:	4a33      	ldr	r2, [pc, #204]	; (8000608 <GPIO_Init+0x198>)
 800053c:	400b      	ands	r3, r1
 800053e:	60d3      	str	r3, [r2, #12]
 8000540:	e019      	b.n	8000576 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )//Dual Triggering
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	795b      	ldrb	r3, [r3, #5]
 8000546:	2b06      	cmp	r3, #6
 8000548:	d115      	bne.n	8000576 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054a:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <GPIO_Init+0x198>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	7912      	ldrb	r2, [r2, #4]
 8000552:	4611      	mov	r1, r2
 8000554:	2201      	movs	r2, #1
 8000556:	408a      	lsls	r2, r1
 8000558:	4611      	mov	r1, r2
 800055a:	4a2b      	ldr	r2, [pc, #172]	; (8000608 <GPIO_Init+0x198>)
 800055c:	430b      	orrs	r3, r1
 800055e:	6093      	str	r3, [r2, #8]

			//2.Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000560:	4b29      	ldr	r3, [pc, #164]	; (8000608 <GPIO_Init+0x198>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	7912      	ldrb	r2, [r2, #4]
 8000568:	4611      	mov	r1, r2
 800056a:	2201      	movs	r2, #1
 800056c:	408a      	lsls	r2, r1
 800056e:	4611      	mov	r1, r2
 8000570:	4a25      	ldr	r2, [pc, #148]	; (8000608 <GPIO_Init+0x198>)
 8000572:	430b      	orrs	r3, r1
 8000574:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	74fb      	strb	r3, [r7, #19]
		//this tells us which CR of the SYSCFG_EXTI block we have to access

		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	791b      	ldrb	r3, [r3, #4]
 8000582:	f003 0303 	and.w	r3, r3, #3
 8000586:	74bb      	strb	r3, [r7, #18]
		// this tells us the bit field to access

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a1f      	ldr	r2, [pc, #124]	; (800060c <GPIO_Init+0x19c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d04e      	beq.n	8000630 <GPIO_Init+0x1c0>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <GPIO_Init+0x1a0>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d032      	beq.n	8000602 <GPIO_Init+0x192>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1c      	ldr	r2, [pc, #112]	; (8000614 <GPIO_Init+0x1a4>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d02b      	beq.n	80005fe <GPIO_Init+0x18e>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <GPIO_Init+0x1a8>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d024      	beq.n	80005fa <GPIO_Init+0x18a>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a19      	ldr	r2, [pc, #100]	; (800061c <GPIO_Init+0x1ac>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d01d      	beq.n	80005f6 <GPIO_Init+0x186>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a18      	ldr	r2, [pc, #96]	; (8000620 <GPIO_Init+0x1b0>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d016      	beq.n	80005f2 <GPIO_Init+0x182>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a16      	ldr	r2, [pc, #88]	; (8000624 <GPIO_Init+0x1b4>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d00f      	beq.n	80005ee <GPIO_Init+0x17e>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <GPIO_Init+0x1b8>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d008      	beq.n	80005ea <GPIO_Init+0x17a>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <GPIO_Init+0x1bc>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d101      	bne.n	80005e6 <GPIO_Init+0x176>
 80005e2:	2308      	movs	r3, #8
 80005e4:	e025      	b.n	8000632 <GPIO_Init+0x1c2>
 80005e6:	2300      	movs	r3, #0
 80005e8:	e023      	b.n	8000632 <GPIO_Init+0x1c2>
 80005ea:	2307      	movs	r3, #7
 80005ec:	e021      	b.n	8000632 <GPIO_Init+0x1c2>
 80005ee:	2306      	movs	r3, #6
 80005f0:	e01f      	b.n	8000632 <GPIO_Init+0x1c2>
 80005f2:	2305      	movs	r3, #5
 80005f4:	e01d      	b.n	8000632 <GPIO_Init+0x1c2>
 80005f6:	2304      	movs	r3, #4
 80005f8:	e01b      	b.n	8000632 <GPIO_Init+0x1c2>
 80005fa:	2303      	movs	r3, #3
 80005fc:	e019      	b.n	8000632 <GPIO_Init+0x1c2>
 80005fe:	2302      	movs	r3, #2
 8000600:	e017      	b.n	8000632 <GPIO_Init+0x1c2>
 8000602:	2301      	movs	r3, #1
 8000604:	e015      	b.n	8000632 <GPIO_Init+0x1c2>
 8000606:	bf00      	nop
 8000608:	40013c00 	.word	0x40013c00
 800060c:	40020000 	.word	0x40020000
 8000610:	40020400 	.word	0x40020400
 8000614:	40020800 	.word	0x40020800
 8000618:	40020c00 	.word	0x40020c00
 800061c:	40021000 	.word	0x40021000
 8000620:	40021400 	.word	0x40021400
 8000624:	40021800 	.word	0x40021800
 8000628:	40021c00 	.word	0x40021c00
 800062c:	40022000 	.word	0x40022000
 8000630:	2300      	movs	r3, #0
 8000632:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000634:	4b5c      	ldr	r3, [pc, #368]	; (80007a8 <GPIO_Init+0x338>)
 8000636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000638:	4a5b      	ldr	r2, [pc, #364]	; (80007a8 <GPIO_Init+0x338>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000640:	7c7a      	ldrb	r2, [r7, #17]
 8000642:	7cbb      	ldrb	r3, [r7, #18]
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	fa02 f103 	lsl.w	r1, r2, r3
 800064a:	4a58      	ldr	r2, [pc, #352]	; (80007ac <GPIO_Init+0x33c>)
 800064c:	7cfb      	ldrb	r3, [r7, #19]
 800064e:	3302      	adds	r3, #2
 8000650:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000654:	4b56      	ldr	r3, [pc, #344]	; (80007b0 <GPIO_Init+0x340>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	7912      	ldrb	r2, [r2, #4]
 800065c:	4611      	mov	r1, r2
 800065e:	2201      	movs	r2, #1
 8000660:	408a      	lsls	r2, r1
 8000662:	4611      	mov	r1, r2
 8000664:	4a52      	ldr	r2, [pc, #328]	; (80007b0 <GPIO_Init+0x340>)
 8000666:	430b      	orrs	r3, r1
 8000668:	6013      	str	r3, [r2, #0]
	/*
	 * SPEED Configuration
	 */

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	799b      	ldrb	r3, [r3, #6]
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	689a      	ldr	r2, [r3, #8]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	2103      	movs	r1, #3
 800068a:	fa01 f303 	lsl.w	r3, r1, r3
 800068e:	43db      	mvns	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	400a      	ands	r2, r1
 8000698:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6899      	ldr	r1, [r3, #8]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	609a      	str	r2, [r3, #8]

    temp=0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
    /*
	 * PULL Configuration
	 */

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	79db      	ldrb	r3, [r3, #7]
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	68da      	ldr	r2, [r3, #12]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	2103      	movs	r1, #3
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	43db      	mvns	r3, r3
 80006d4:	4619      	mov	r1, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	400a      	ands	r2, r1
 80006dc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68d9      	ldr	r1, [r3, #12]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	430a      	orrs	r2, r1
 80006ec:	60da      	str	r2, [r3, #12]

	temp = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
	/*
	 * OUTPUT TYPE Configuration
	 */

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	7a1b      	ldrb	r3, [r3, #8]
 80006f6:	461a      	mov	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	791b      	ldrb	r3, [r3, #4]
 80006fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000700:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	4619      	mov	r1, r3
 800070e:	2301      	movs	r3, #1
 8000710:	408b      	lsls	r3, r1
 8000712:	43db      	mvns	r3, r3
 8000714:	4619      	mov	r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	400a      	ands	r2, r1
 800071c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6859      	ldr	r1, [r3, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	697a      	ldr	r2, [r7, #20]
 800072a:	430a      	orrs	r2, r1
 800072c:	605a      	str	r2, [r3, #4]

	temp=0;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
	 * ALTERNATE MODE Configuration
	 */


	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	795b      	ldrb	r3, [r3, #5]
 8000736:	2b02      	cmp	r3, #2
 8000738:	d131      	bne.n	800079e <GPIO_Init+0x32e>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	08db      	lsrs	r3, r3, #3
 8000740:	743b      	strb	r3, [r7, #16]
		//this is done to decide which register to use, AFRL or AFRH

		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	791b      	ldrb	r3, [r3, #4]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	73fb      	strb	r3, [r7, #15]
		//this done to tell us the bit field to be configured (AFRx) in the Low or High Registers.

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) );
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	7c3a      	ldrb	r2, [r7, #16]
 8000752:	3208      	adds	r2, #8
 8000754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	220f      	movs	r2, #15
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43db      	mvns	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	7c3a      	ldrb	r2, [r7, #16]
 800076c:	4001      	ands	r1, r0
 800076e:	3208      	adds	r2, #8
 8000770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//clearing; (temp2 * 4) tells us teh starting bit position of the bit field that needs configuring

		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	7c3a      	ldrb	r2, [r7, #16]
 800077a:	3208      	adds	r2, #8
 800077c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7a5b      	ldrb	r3, [r3, #9]
 8000784:	461a      	mov	r2, r3
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	4618      	mov	r0, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	7c3a      	ldrb	r2, [r7, #16]
 8000796:	4301      	orrs	r1, r0
 8000798:	3208      	adds	r2, #8
 800079a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40013800 	.word	0x40013800
 80007b0:	40013c00 	.word	0x40013c00

080007b4 <GPIO_ToggleOutputPin>:
 *
 * @Note              -

 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR  ^= ( 1 << PinNumber);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	78fa      	ldrb	r2, [r7, #3]
 80007c6:	2101      	movs	r1, #1
 80007c8:	fa01 f202 	lsl.w	r2, r1, r2
 80007cc:	405a      	eors	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	615a      	str	r2, [r3, #20]
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
	...

080007e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <SystemInit+0x20>)
 80007e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ea:	4a05      	ldr	r2, [pc, #20]	; (8000800 <SystemInit+0x20>)
 80007ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800083c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800080a:	490e      	ldr	r1, [pc, #56]	; (8000844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800080c:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0b      	ldr	r2, [pc, #44]	; (800084c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000820:	4c0b      	ldr	r4, [pc, #44]	; (8000850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800082e:	f7ff ffd7 	bl	80007e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000832:	f000 f811 	bl	8000858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000836:	f7ff fcdd 	bl	80001f4 <main>
  bx  lr    
 800083a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800083c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000848:	080008c0 	.word	0x080008c0
  ldr r2, =_sbss
 800084c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000850:	2000001c 	.word	0x2000001c

08000854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC_IRQHandler>
	...

08000858 <__libc_init_array>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	4d0d      	ldr	r5, [pc, #52]	; (8000890 <__libc_init_array+0x38>)
 800085c:	4c0d      	ldr	r4, [pc, #52]	; (8000894 <__libc_init_array+0x3c>)
 800085e:	1b64      	subs	r4, r4, r5
 8000860:	10a4      	asrs	r4, r4, #2
 8000862:	2600      	movs	r6, #0
 8000864:	42a6      	cmp	r6, r4
 8000866:	d109      	bne.n	800087c <__libc_init_array+0x24>
 8000868:	4d0b      	ldr	r5, [pc, #44]	; (8000898 <__libc_init_array+0x40>)
 800086a:	4c0c      	ldr	r4, [pc, #48]	; (800089c <__libc_init_array+0x44>)
 800086c:	f000 f818 	bl	80008a0 <_init>
 8000870:	1b64      	subs	r4, r4, r5
 8000872:	10a4      	asrs	r4, r4, #2
 8000874:	2600      	movs	r6, #0
 8000876:	42a6      	cmp	r6, r4
 8000878:	d105      	bne.n	8000886 <__libc_init_array+0x2e>
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000880:	4798      	blx	r3
 8000882:	3601      	adds	r6, #1
 8000884:	e7ee      	b.n	8000864 <__libc_init_array+0xc>
 8000886:	f855 3b04 	ldr.w	r3, [r5], #4
 800088a:	4798      	blx	r3
 800088c:	3601      	adds	r6, #1
 800088e:	e7f2      	b.n	8000876 <__libc_init_array+0x1e>
 8000890:	080008b8 	.word	0x080008b8
 8000894:	080008b8 	.word	0x080008b8
 8000898:	080008b8 	.word	0x080008b8
 800089c:	080008bc 	.word	0x080008bc

080008a0 <_init>:
 80008a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008a2:	bf00      	nop
 80008a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008a6:	bc08      	pop	{r3}
 80008a8:	469e      	mov	lr, r3
 80008aa:	4770      	bx	lr

080008ac <_fini>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	bf00      	nop
 80008b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008b2:	bc08      	pop	{r3}
 80008b4:	469e      	mov	lr, r3
 80008b6:	4770      	bx	lr
