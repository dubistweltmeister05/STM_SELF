
SPI_DRIVEN_OPERATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000204c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080021d4  080021d4  000121d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021e8  080021e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080021e8  080021e8  000121e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021f0  080021f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021f0  080021f0  000121f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021f4  080021f4  000121f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000034  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000040  20000040  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004c1a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011b7  00000000  00000000  00024c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000498  00000000  00000000  00025e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003f0  00000000  00000000  000262a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020497  00000000  00000000  00026698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005bf8  00000000  00000000  00046b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2673  00000000  00000000  0004c727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ed9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000010bc  00000000  00000000  0010edec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021bc 	.word	0x080021bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080021bc 	.word	0x080021bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SysTick_Handler>:

#include"main.h"


void SysTick_Handler (void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004d0:	f000 fefa 	bl	80012c8 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004d4:	f001 f81a 	bl	800150c <HAL_SYSTICK_IRQHandler>
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <main>:
 */

/*
 * MAIN CODE
 */
int main (void){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0


	HAL_Init();
 80004e2:	f000 fe9f 	bl	8001224 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLK_FREQ_50_MHZ);
 80004e6:	2032      	movs	r0, #50	; 0x32
 80004e8:	f000 f850 	bl	800058c <SystemClock_Config_HSE>

	led_init();
 80004ec:	f000 f9dc 	bl	80008a8 <led_init>

	char user_data[1];

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80004f0:	f000 fa1e 	bl	8000930 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80004f4:	f000 fa3e 	bl	8000974 <SPI2_Inits>

	//this makes NSS signal internally high and avoids MODF error
	SPI_SSIConfig(SPI2,ENABLE);
 80004f8:	2101      	movs	r1, #1
 80004fa:	4816      	ldr	r0, [pc, #88]	; (8000554 <main+0x78>)
 80004fc:	f000 fe3a 	bl	8001174 <SPI_SSIConfig>

	//enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 8000500:	2101      	movs	r1, #1
 8000502:	4814      	ldr	r0, [pc, #80]	; (8000554 <main+0x78>)
 8000504:	f000 fe1a 	bl	800113c <SPI_PeripheralControl>

	//to send data
	SPI_ReceiveData(SPI2,(uint8_t*)user_data,1);
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2201      	movs	r2, #1
 800050c:	4619      	mov	r1, r3
 800050e:	4811      	ldr	r0, [pc, #68]	; (8000554 <main+0x78>)
 8000510:	f000 fddd 	bl	80010ce <SPI_ReceiveData>

	if(user_data[0] == "w"){
 8000514:	793b      	ldrb	r3, [r7, #4]
 8000516:	461a      	mov	r2, r3
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <main+0x7c>)
 800051a:	429a      	cmp	r2, r3
 800051c:	d106      	bne.n	800052c <main+0x50>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <main+0x80>)
 8000526:	f001 f99b 	bl	8001860 <HAL_GPIO_WritePin>
 800052a:	e005      	b.n	8000538 <main+0x5c>
	}
	else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000532:	480a      	ldr	r0, [pc, #40]	; (800055c <main+0x80>)
 8000534:	f001 f994 	bl	8001860 <HAL_GPIO_WritePin>

	}

	//lets confirm SPI is not busy
	while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 8000538:	bf00      	nop
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <main+0x78>)
 800053e:	f000 fdb2 	bl	80010a6 <SPI_GetFlagStatus>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d1f8      	bne.n	800053a <main+0x5e>

	//Disable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,DISABLE);
 8000548:	2100      	movs	r1, #0
 800054a:	4802      	ldr	r0, [pc, #8]	; (8000554 <main+0x78>)
 800054c:	f000 fdf6 	bl	800113c <SPI_PeripheralControl>

	while(1);
 8000550:	e7fe      	b.n	8000550 <main+0x74>
 8000552:	bf00      	nop
 8000554:	40003800 	.word	0x40003800
 8000558:	080021d4 	.word	0x080021d4
 800055c:	40020c00 	.word	0x40020c00

08000560 <delay>:

/*
 * IMPLEMENTATION OF ALL USER DEFINED FUNCTIONS APART FROM THE MAIN FUNCTION
 * IN THE ORDER OF THEIR PROTOTYPES
 */
void  delay(){
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
	for (int i=0;i<500000;i++);
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e002      	b.n	8000572 <delay+0x12>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3301      	adds	r3, #1
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <delay+0x28>)
 8000576:	4293      	cmp	r3, r2
 8000578:	ddf8      	ble.n	800056c <delay+0xc>
}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	0007a11f 	.word	0x0007a11f

0800058c <SystemClock_Config_HSE>:
	button.Speed = GPIO_SPEED_FAST;
	HAL_GPIO_Init(GPIOA, &button);

}

void SystemClock_Config_HSE(uint8_t clk_freq){
 800058c:	b580      	push	{r7, lr}
 800058e:	b09a      	sub	sp, #104	; 0x68
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint8_t FLatency = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI ;
 800059c:	2303      	movs	r3, #3
 800059e:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.HSIState = RCC_HSI_ON;
 80005a6:	2301      	movs	r3, #1
 80005a8:	643b      	str	r3, [r7, #64]	; 0x40
	osc_init.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b2:	653b      	str	r3, [r7, #80]	; 0x50
	switch (clk_freq){
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2ba8      	cmp	r3, #168	; 0xa8
 80005b8:	f000 80dd 	beq.w	8000776 <SystemClock_Config_HSE+0x1ea>
 80005bc:	2ba8      	cmp	r3, #168	; 0xa8
 80005be:	f300 8161 	bgt.w	8000884 <SystemClock_Config_HSE+0x2f8>
 80005c2:	2b78      	cmp	r3, #120	; 0x78
 80005c4:	f000 8092 	beq.w	80006ec <SystemClock_Config_HSE+0x160>
 80005c8:	2b78      	cmp	r3, #120	; 0x78
 80005ca:	f300 815b 	bgt.w	8000884 <SystemClock_Config_HSE+0x2f8>
 80005ce:	2b32      	cmp	r3, #50	; 0x32
 80005d0:	d002      	beq.n	80005d8 <SystemClock_Config_HSE+0x4c>
 80005d2:	2b54      	cmp	r3, #84	; 0x54
 80005d4:	d045      	beq.n	8000662 <SystemClock_Config_HSE+0xd6>
		delay();
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_RESET);
		break;
	}
	default:
		return;
 80005d6:	e155      	b.n	8000884 <SystemClock_Config_HSE+0x2f8>
		osc_init.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	657b      	str	r3, [r7, #84]	; 0x54
		osc_init.PLL.PLLN = 100;
 80005dc:	2364      	movs	r3, #100	; 0x64
 80005de:	65bb      	str	r3, [r7, #88]	; 0x58
		osc_init.PLL.PLLP = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	65fb      	str	r3, [r7, #92]	; 0x5c
		osc_init.PLL.PLLQ = 2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	663b      	str	r3, [r7, #96]	; 0x60
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80005e8:	230f      	movs	r3, #15
 80005ea:	623b      	str	r3, [r7, #32]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	62bb      	str	r3, [r7, #40]	; 0x28
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
		FLatency = FLASH_ACR_LATENCY_1WS;
 8000600:	2301      	movs	r3, #1
 8000602:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
 800060a:	4ba0      	ldr	r3, [pc, #640]	; (800088c <SystemClock_Config_HSE+0x300>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a9f      	ldr	r2, [pc, #636]	; (800088c <SystemClock_Config_HSE+0x300>)
 8000610:	f043 0308 	orr.w	r3, r3, #8
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b9d      	ldr	r3, [pc, #628]	; (800088c <SystemClock_Config_HSE+0x300>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	61fb      	str	r3, [r7, #28]
 8000620:	69fb      	ldr	r3, [r7, #28]
		led.Pin = GPIO_PIN_12;
 8000622:	4b9b      	ldr	r3, [pc, #620]	; (8000890 <SystemClock_Config_HSE+0x304>)
 8000624:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000628:	601a      	str	r2, [r3, #0]
		led.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	4b99      	ldr	r3, [pc, #612]	; (8000890 <SystemClock_Config_HSE+0x304>)
 800062c:	2201      	movs	r2, #1
 800062e:	605a      	str	r2, [r3, #4]
		led.Speed = GPIO_SPEED_FREQ_HIGH;
 8000630:	4b97      	ldr	r3, [pc, #604]	; (8000890 <SystemClock_Config_HSE+0x304>)
 8000632:	2202      	movs	r2, #2
 8000634:	60da      	str	r2, [r3, #12]
		led.Pull = GPIO_NOPULL;
 8000636:	4b96      	ldr	r3, [pc, #600]	; (8000890 <SystemClock_Config_HSE+0x304>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOD, &led);
 800063c:	4994      	ldr	r1, [pc, #592]	; (8000890 <SystemClock_Config_HSE+0x304>)
 800063e:	4895      	ldr	r0, [pc, #596]	; (8000894 <SystemClock_Config_HSE+0x308>)
 8000640:	f000 ff72 	bl	8001528 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064a:	4892      	ldr	r0, [pc, #584]	; (8000894 <SystemClock_Config_HSE+0x308>)
 800064c:	f001 f908 	bl	8001860 <HAL_GPIO_WritePin>
		delay();
 8000650:	f7ff ff86 	bl	8000560 <delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065a:	488e      	ldr	r0, [pc, #568]	; (8000894 <SystemClock_Config_HSE+0x308>)
 800065c:	f001 f900 	bl	8001860 <HAL_GPIO_WritePin>
		break;
 8000660:	e0eb      	b.n	800083a <SystemClock_Config_HSE+0x2ae>
		osc_init.PLL.PLLM = 8;
 8000662:	2308      	movs	r3, #8
 8000664:	657b      	str	r3, [r7, #84]	; 0x54
		osc_init.PLL.PLLN = 168;
 8000666:	23a8      	movs	r3, #168	; 0xa8
 8000668:	65bb      	str	r3, [r7, #88]	; 0x58
		osc_init.PLL.PLLP = 2;
 800066a:	2302      	movs	r3, #2
 800066c:	65fb      	str	r3, [r7, #92]	; 0x5c
		osc_init.PLL.PLLQ = 2;
 800066e:	2302      	movs	r3, #2
 8000670:	663b      	str	r3, [r7, #96]	; 0x60
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000672:	230f      	movs	r3, #15
 8000674:	623b      	str	r3, [r7, #32]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2302      	movs	r3, #2
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
		FLatency = FLASH_ACR_LATENCY_2WS;
 800068a:	2302      	movs	r3, #2
 800068c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
 8000694:	4b7d      	ldr	r3, [pc, #500]	; (800088c <SystemClock_Config_HSE+0x300>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	4a7c      	ldr	r2, [pc, #496]	; (800088c <SystemClock_Config_HSE+0x300>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6313      	str	r3, [r2, #48]	; 0x30
 80006a0:	4b7a      	ldr	r3, [pc, #488]	; (800088c <SystemClock_Config_HSE+0x300>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	61bb      	str	r3, [r7, #24]
 80006aa:	69bb      	ldr	r3, [r7, #24]
		led.Pin = GPIO_PIN_13;
 80006ac:	4b78      	ldr	r3, [pc, #480]	; (8000890 <SystemClock_Config_HSE+0x304>)
 80006ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b2:	601a      	str	r2, [r3, #0]
		led.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	4b76      	ldr	r3, [pc, #472]	; (8000890 <SystemClock_Config_HSE+0x304>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	605a      	str	r2, [r3, #4]
		led.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ba:	4b75      	ldr	r3, [pc, #468]	; (8000890 <SystemClock_Config_HSE+0x304>)
 80006bc:	2202      	movs	r2, #2
 80006be:	60da      	str	r2, [r3, #12]
		led.Pull = GPIO_NOPULL;
 80006c0:	4b73      	ldr	r3, [pc, #460]	; (8000890 <SystemClock_Config_HSE+0x304>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOD, &led);
 80006c6:	4972      	ldr	r1, [pc, #456]	; (8000890 <SystemClock_Config_HSE+0x304>)
 80006c8:	4872      	ldr	r0, [pc, #456]	; (8000894 <SystemClock_Config_HSE+0x308>)
 80006ca:	f000 ff2d 	bl	8001528 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d4:	486f      	ldr	r0, [pc, #444]	; (8000894 <SystemClock_Config_HSE+0x308>)
 80006d6:	f001 f8c3 	bl	8001860 <HAL_GPIO_WritePin>
		delay();
 80006da:	f7ff ff41 	bl	8000560 <delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e4:	486b      	ldr	r0, [pc, #428]	; (8000894 <SystemClock_Config_HSE+0x308>)
 80006e6:	f001 f8bb 	bl	8001860 <HAL_GPIO_WritePin>
		break;
 80006ea:	e0a6      	b.n	800083a <SystemClock_Config_HSE+0x2ae>
		osc_init.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	657b      	str	r3, [r7, #84]	; 0x54
		osc_init.PLL.PLLN = 240;
 80006f0:	23f0      	movs	r3, #240	; 0xf0
 80006f2:	65bb      	str	r3, [r7, #88]	; 0x58
		osc_init.PLL.PLLP = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	65fb      	str	r3, [r7, #92]	; 0x5c
		osc_init.PLL.PLLQ = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	663b      	str	r3, [r7, #96]	; 0x60
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80006fc:	230f      	movs	r3, #15
 80006fe:	623b      	str	r3, [r7, #32]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000708:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
		FLatency = FLASH_ACR_LATENCY_3WS;
 8000714:	2303      	movs	r3, #3
 8000716:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	4b5b      	ldr	r3, [pc, #364]	; (800088c <SystemClock_Config_HSE+0x300>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a5a      	ldr	r2, [pc, #360]	; (800088c <SystemClock_Config_HSE+0x300>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b58      	ldr	r3, [pc, #352]	; (800088c <SystemClock_Config_HSE+0x300>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
		led.Pin = GPIO_PIN_14;
 8000736:	4b56      	ldr	r3, [pc, #344]	; (8000890 <SystemClock_Config_HSE+0x304>)
 8000738:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073c:	601a      	str	r2, [r3, #0]
		led.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	4b54      	ldr	r3, [pc, #336]	; (8000890 <SystemClock_Config_HSE+0x304>)
 8000740:	2201      	movs	r2, #1
 8000742:	605a      	str	r2, [r3, #4]
		led.Speed = GPIO_SPEED_FREQ_HIGH;
 8000744:	4b52      	ldr	r3, [pc, #328]	; (8000890 <SystemClock_Config_HSE+0x304>)
 8000746:	2202      	movs	r2, #2
 8000748:	60da      	str	r2, [r3, #12]
		led.Pull = GPIO_NOPULL;
 800074a:	4b51      	ldr	r3, [pc, #324]	; (8000890 <SystemClock_Config_HSE+0x304>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOD, &led);
 8000750:	494f      	ldr	r1, [pc, #316]	; (8000890 <SystemClock_Config_HSE+0x304>)
 8000752:	4850      	ldr	r0, [pc, #320]	; (8000894 <SystemClock_Config_HSE+0x308>)
 8000754:	f000 fee8 	bl	8001528 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800075e:	484d      	ldr	r0, [pc, #308]	; (8000894 <SystemClock_Config_HSE+0x308>)
 8000760:	f001 f87e 	bl	8001860 <HAL_GPIO_WritePin>
		delay();
 8000764:	f7ff fefc 	bl	8000560 <delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800076e:	4849      	ldr	r0, [pc, #292]	; (8000894 <SystemClock_Config_HSE+0x308>)
 8000770:	f001 f876 	bl	8001860 <HAL_GPIO_WritePin>
		break;
 8000774:	e061      	b.n	800083a <SystemClock_Config_HSE+0x2ae>
		__HAL_RCC_PWR_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b44      	ldr	r3, [pc, #272]	; (800088c <SystemClock_Config_HSE+0x300>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a43      	ldr	r2, [pc, #268]	; (800088c <SystemClock_Config_HSE+0x300>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <SystemClock_Config_HSE+0x300>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b40      	ldr	r3, [pc, #256]	; (8000898 <SystemClock_Config_HSE+0x30c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a3f      	ldr	r2, [pc, #252]	; (8000898 <SystemClock_Config_HSE+0x30c>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <SystemClock_Config_HSE+0x30c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
		osc_init.PLL.PLLM = 8;
 80007ae:	2308      	movs	r3, #8
 80007b0:	657b      	str	r3, [r7, #84]	; 0x54
		osc_init.PLL.PLLN = 336;
 80007b2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007b6:	65bb      	str	r3, [r7, #88]	; 0x58
		osc_init.PLL.PLLP = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	65fb      	str	r3, [r7, #92]	; 0x5c
		osc_init.PLL.PLLQ = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	663b      	str	r3, [r7, #96]	; 0x60
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80007c0:	230f      	movs	r3, #15
 80007c2:	623b      	str	r3, [r7, #32]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80007cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
		FLatency = FLASH_ACR_LATENCY_5WS;
 80007d8:	2305      	movs	r3, #5
 80007da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <SystemClock_Config_HSE+0x300>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a29      	ldr	r2, [pc, #164]	; (800088c <SystemClock_Config_HSE+0x300>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b27      	ldr	r3, [pc, #156]	; (800088c <SystemClock_Config_HSE+0x300>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
		led.Pin = GPIO_PIN_15;
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <SystemClock_Config_HSE+0x304>)
 80007fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000800:	601a      	str	r2, [r3, #0]
		led.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <SystemClock_Config_HSE+0x304>)
 8000804:	2201      	movs	r2, #1
 8000806:	605a      	str	r2, [r3, #4]
		led.Speed = GPIO_SPEED_FREQ_HIGH;
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <SystemClock_Config_HSE+0x304>)
 800080a:	2202      	movs	r2, #2
 800080c:	60da      	str	r2, [r3, #12]
		led.Pull = GPIO_NOPULL;
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <SystemClock_Config_HSE+0x304>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOD, &led);
 8000814:	491e      	ldr	r1, [pc, #120]	; (8000890 <SystemClock_Config_HSE+0x304>)
 8000816:	481f      	ldr	r0, [pc, #124]	; (8000894 <SystemClock_Config_HSE+0x308>)
 8000818:	f000 fe86 	bl	8001528 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000822:	481c      	ldr	r0, [pc, #112]	; (8000894 <SystemClock_Config_HSE+0x308>)
 8000824:	f001 f81c 	bl	8001860 <HAL_GPIO_WritePin>
		delay();
 8000828:	f7ff fe9a 	bl	8000560 <delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000832:	4818      	ldr	r0, [pc, #96]	; (8000894 <SystemClock_Config_HSE+0x308>)
 8000834:	f001 f814 	bl	8001860 <HAL_GPIO_WritePin>
		break;
 8000838:	bf00      	nop
	}
	if (HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 800083a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800083e:	4618      	mov	r0, r3
 8000840:	f001 f828 	bl	8001894 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config_HSE+0x2c2>
		Error_Handler();
 800084a:	f000 f829 	bl	80008a0 <Error_Handler>
	}

	if( HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 800084e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fa93 	bl	8001d84 <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config_HSE+0x2dc>
	{
		Error_Handler();
 8000864:	f000 f81c 	bl	80008a0 <Error_Handler>
	}
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000868:	f001 fc78 	bl	800215c <HAL_RCC_GetHCLKFreq>
 800086c:	4603      	mov	r3, r0
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <SystemClock_Config_HSE+0x310>)
 8000870:	fba2 2303 	umull	r2, r3, r2, r3
 8000874:	099b      	lsrs	r3, r3, #6
 8000876:	4618      	mov	r0, r3
 8000878:	f000 fe1f 	bl	80014ba <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800087c:	2004      	movs	r0, #4
 800087e:	f000 fe29 	bl	80014d4 <HAL_SYSTICK_CLKSourceConfig>
 8000882:	e000      	b.n	8000886 <SystemClock_Config_HSE+0x2fa>
		return;
 8000884:	bf00      	nop
}
 8000886:	3768      	adds	r7, #104	; 0x68
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	20000028 	.word	0x20000028
 8000894:	40020c00 	.word	0x40020c00
 8000898:	40007000 	.word	0x40007000
 800089c:	10624dd3 	.word	0x10624dd3

080008a0 <Error_Handler>:

void Error_Handler(){
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
	while(1);
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x4>
	...

080008a8 <led_init>:
}

void led_init(){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
	//1. Enabling the clock for the LED GPIOS
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <led_init+0x7c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <led_init+0x7c>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <led_init+0x7c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

	//2. Setting the parameters of the operation
	led.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <led_init+0x80>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	605a      	str	r2, [r3, #4]
	led.Pull = GPIO_NOPULL;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <led_init+0x80>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
	led.Speed = GPIO_SPEED_FAST;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <led_init+0x80>)
 80008d8:	2202      	movs	r2, #2
 80008da:	60da      	str	r2, [r3, #12]

	led.Pin = GPIO_PIN_12;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <led_init+0x80>)
 80008de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008e2:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOD, &led); //green
 80008e4:	4910      	ldr	r1, [pc, #64]	; (8000928 <led_init+0x80>)
 80008e6:	4811      	ldr	r0, [pc, #68]	; (800092c <led_init+0x84>)
 80008e8:	f000 fe1e 	bl	8001528 <HAL_GPIO_Init>

	led.Pin = GPIO_PIN_13;
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <led_init+0x80>)
 80008ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f2:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOD, &led); //orange
 80008f4:	490c      	ldr	r1, [pc, #48]	; (8000928 <led_init+0x80>)
 80008f6:	480d      	ldr	r0, [pc, #52]	; (800092c <led_init+0x84>)
 80008f8:	f000 fe16 	bl	8001528 <HAL_GPIO_Init>

	led.Pin = GPIO_PIN_14;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <led_init+0x80>)
 80008fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000902:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOD, &led); //red
 8000904:	4908      	ldr	r1, [pc, #32]	; (8000928 <led_init+0x80>)
 8000906:	4809      	ldr	r0, [pc, #36]	; (800092c <led_init+0x84>)
 8000908:	f000 fe0e 	bl	8001528 <HAL_GPIO_Init>

	led.Pin = GPIO_PIN_15;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <led_init+0x80>)
 800090e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000912:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOD, &led); //blue
 8000914:	4904      	ldr	r1, [pc, #16]	; (8000928 <led_init+0x80>)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <led_init+0x84>)
 8000918:	f000 fe06 	bl	8001528 <HAL_GPIO_Init>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	20000028 	.word	0x20000028
 800092c:	40020c00 	.word	0x40020c00

08000930 <SPI2_GPIOInits>:
void SPI2_GPIOInits(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <SPI2_GPIOInits+0x40>)
 8000938:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800093a:	2302      	movs	r3, #2
 800093c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800093e:	2305      	movs	r3, #5
 8000940:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000942:	2300      	movs	r3, #0
 8000944:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000946:	2300      	movs	r3, #0
 8000948:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800094a:	2302      	movs	r3, #2
 800094c:	72bb      	strb	r3, [r7, #10]

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13; //For the SCLK
 800094e:	230d      	movs	r3, #13
 8000950:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f935 	bl	8000bc4 <GPIO_Init>

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14; //For the MISO
 800095a:	230e      	movs	r3, #14
 800095c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f92f 	bl	8000bc4 <GPIO_Init>
	//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15; //For the MOSI
	//	GPIO_Init(&SPIPins);
	//
	//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12; //For the NSS
	//	GPIO_Init(&SPIPins);
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40020400 	.word	0x40020400

08000974 <SPI2_Inits>:

void SPI2_Inits(){
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <SPI2_Inits+0x38>)
 800097c:	607b      	str	r3, [r7, #4]

	SPI2handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800097e:	2301      	movs	r3, #1
 8000980:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 8000982:	2300      	movs	r3, #0
 8000984:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV_2;
 8000986:	2300      	movs	r3, #0
 8000988:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPI_Config.SPI_BusConfig = SPI_BUSCONGID_FD;
 800098a:	2301      	movs	r3, #1
 800098c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPI_Config.SPI_SSM = SPI_SSM_EN;
 8000996:	2301      	movs	r3, #1
 8000998:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fb23 	bl	8000fe8 <SPI_Init>
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40003800 	.word	0x40003800

080009b0 <HAL_MspInit>:

#include "main.h"
#include "stm32f4xx.h"
#include "stm32f407xx.h"
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 fd59 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_MspInit+0x40>)
 80009bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009be:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <HAL_MspInit+0x40>)
 80009c0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80009c4:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	f06f 000b 	mvn.w	r0, #11
 80009ce:	f000 fd58 	bl	8001482 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	f06f 000a 	mvn.w	r0, #10
 80009da:	f000 fd52 	bl	8001482 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	f06f 0009 	mvn.w	r0, #9
 80009e6:	f000 fd4c 	bl	8001482 <HAL_NVIC_SetPriority>
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a00:	78fb      	ldrb	r3, [r7, #3]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d162      	bne.n	8000acc <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a64      	ldr	r2, [pc, #400]	; (8000b9c <GPIO_PeriClockControl+0x1a8>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d106      	bne.n	8000a1c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000a0e:	4b64      	ldr	r3, [pc, #400]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a63      	ldr	r2, [pc, #396]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 8000a1a:	e0b9      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a61      	ldr	r2, [pc, #388]	; (8000ba4 <GPIO_PeriClockControl+0x1b0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d106      	bne.n	8000a32 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000a24:	4b5e      	ldr	r3, [pc, #376]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	4a5d      	ldr	r2, [pc, #372]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a30:	e0ae      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a5c      	ldr	r2, [pc, #368]	; (8000ba8 <GPIO_PeriClockControl+0x1b4>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d106      	bne.n	8000a48 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000a3a:	4b59      	ldr	r3, [pc, #356]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a58      	ldr	r2, [pc, #352]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a46:	e0a3      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a58      	ldr	r2, [pc, #352]	; (8000bac <GPIO_PeriClockControl+0x1b8>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d106      	bne.n	8000a5e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000a50:	4b53      	ldr	r3, [pc, #332]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a52      	ldr	r2, [pc, #328]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a5c:	e098      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a53      	ldr	r2, [pc, #332]	; (8000bb0 <GPIO_PeriClockControl+0x1bc>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d106      	bne.n	8000a74 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000a66:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a4d      	ldr	r2, [pc, #308]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a6c:	f043 0310 	orr.w	r3, r3, #16
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a72:	e08d      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a4f      	ldr	r2, [pc, #316]	; (8000bb4 <GPIO_PeriClockControl+0x1c0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d106      	bne.n	8000a8a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000a7c:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	4a47      	ldr	r2, [pc, #284]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a82:	f043 0320 	orr.w	r3, r3, #32
 8000a86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a88:	e082      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a4a      	ldr	r2, [pc, #296]	; (8000bb8 <GPIO_PeriClockControl+0x1c4>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d106      	bne.n	8000aa0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000a92:	4b43      	ldr	r3, [pc, #268]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a42      	ldr	r2, [pc, #264]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a9e:	e077      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a46      	ldr	r2, [pc, #280]	; (8000bbc <GPIO_PeriClockControl+0x1c8>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d106      	bne.n	8000ab6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000aa8:	4b3d      	ldr	r3, [pc, #244]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4a3c      	ldr	r2, [pc, #240]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ab4:	e06c      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a41      	ldr	r2, [pc, #260]	; (8000bc0 <GPIO_PeriClockControl+0x1cc>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d168      	bne.n	8000b90 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000abe:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a37      	ldr	r2, [pc, #220]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aca:	e061      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a33      	ldr	r2, [pc, #204]	; (8000b9c <GPIO_PeriClockControl+0x1a8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d106      	bne.n	8000ae2 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000ad4:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	4a31      	ldr	r2, [pc, #196]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000ada:	f023 0301 	bic.w	r3, r3, #1
 8000ade:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ae0:	e056      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a2f      	ldr	r2, [pc, #188]	; (8000ba4 <GPIO_PeriClockControl+0x1b0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d106      	bne.n	8000af8 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000aea:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a2c      	ldr	r2, [pc, #176]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000af0:	f023 0302 	bic.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000af6:	e04b      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a2b      	ldr	r2, [pc, #172]	; (8000ba8 <GPIO_PeriClockControl+0x1b4>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d106      	bne.n	8000b0e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000b00:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a26      	ldr	r2, [pc, #152]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b06:	f023 0304 	bic.w	r3, r3, #4
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b0c:	e040      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a26      	ldr	r2, [pc, #152]	; (8000bac <GPIO_PeriClockControl+0x1b8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d106      	bne.n	8000b24 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b1c:	f023 0308 	bic.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b22:	e035      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <GPIO_PeriClockControl+0x1bc>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d106      	bne.n	8000b3a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b32:	f023 0310 	bic.w	r3, r3, #16
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b38:	e02a      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <GPIO_PeriClockControl+0x1c0>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d106      	bne.n	8000b50 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a16      	ldr	r2, [pc, #88]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b48:	f023 0320 	bic.w	r3, r3, #32
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b4e:	e01f      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <GPIO_PeriClockControl+0x1c4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d106      	bne.n	8000b66 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b62:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b64:	e014      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <GPIO_PeriClockControl+0x1c8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d106      	bne.n	8000b7c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b7a:	e009      	b.n	8000b90 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <GPIO_PeriClockControl+0x1cc>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d105      	bne.n	8000b90 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <GPIO_PeriClockControl+0x1ac>)
 8000b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	40020800 	.word	0x40020800
 8000bac:	40020c00 	.word	0x40020c00
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40021400 	.word	0x40021400
 8000bb8:	40021800 	.word	0x40021800
 8000bbc:	40021c00 	.word	0x40021c00
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; //temp. register
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff0c 	bl	80009f4 <GPIO_PeriClockControl>
	 * Mode Configuration
	 */

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	795b      	ldrb	r3, [r3, #5]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d820      	bhi.n	8000c26 <GPIO_Init+0x62>
	{
		//the non interrupt mode

		//writing the pinmode at appropriate bits of MODER
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	795b      	ldrb	r3, [r3, #5]
 8000be8:	461a      	mov	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	617b      	str	r3, [r7, #20]

		//clearing any pre-set bits
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	791b      	ldrb	r3, [r3, #4]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2103      	movs	r1, #3
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	400a      	ands	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]

		//setting the value already loaded in temp.
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6819      	ldr	r1, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	430a      	orrs	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	e0cb      	b.n	8000dbe <GPIO_Init+0x1fa>
	}else
	{
		//this part is the interrupt mode, so special coding is needed

		//1. Select the triggering mechanism
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) //Falling edge triggering
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	795b      	ldrb	r3, [r3, #5]
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d117      	bne.n	8000c5e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c2e:	4b4b      	ldr	r3, [pc, #300]	; (8000d5c <GPIO_Init+0x198>)
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	7912      	ldrb	r2, [r2, #4]
 8000c36:	4611      	mov	r1, r2
 8000c38:	2201      	movs	r2, #1
 8000c3a:	408a      	lsls	r2, r1
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4a47      	ldr	r2, [pc, #284]	; (8000d5c <GPIO_Init+0x198>)
 8000c40:	430b      	orrs	r3, r1
 8000c42:	60d3      	str	r3, [r2, #12]

			//2.Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c44:	4b45      	ldr	r3, [pc, #276]	; (8000d5c <GPIO_Init+0x198>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	7912      	ldrb	r2, [r2, #4]
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	2201      	movs	r2, #1
 8000c50:	408a      	lsls	r2, r1
 8000c52:	43d2      	mvns	r2, r2
 8000c54:	4611      	mov	r1, r2
 8000c56:	4a41      	ldr	r2, [pc, #260]	; (8000d5c <GPIO_Init+0x198>)
 8000c58:	400b      	ands	r3, r1
 8000c5a:	6093      	str	r3, [r2, #8]
 8000c5c:	e035      	b.n	8000cca <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) //Rising edge triggering
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	795b      	ldrb	r3, [r3, #5]
 8000c62:	2b05      	cmp	r3, #5
 8000c64:	d117      	bne.n	8000c96 <GPIO_Init+0xd2>
		{
			//1.configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c66:	4b3d      	ldr	r3, [pc, #244]	; (8000d5c <GPIO_Init+0x198>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	7912      	ldrb	r2, [r2, #4]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	2201      	movs	r2, #1
 8000c72:	408a      	lsls	r2, r1
 8000c74:	4611      	mov	r1, r2
 8000c76:	4a39      	ldr	r2, [pc, #228]	; (8000d5c <GPIO_Init+0x198>)
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	6093      	str	r3, [r2, #8]

			//2.Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c7c:	4b37      	ldr	r3, [pc, #220]	; (8000d5c <GPIO_Init+0x198>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	7912      	ldrb	r2, [r2, #4]
 8000c84:	4611      	mov	r1, r2
 8000c86:	2201      	movs	r2, #1
 8000c88:	408a      	lsls	r2, r1
 8000c8a:	43d2      	mvns	r2, r2
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4a33      	ldr	r2, [pc, #204]	; (8000d5c <GPIO_Init+0x198>)
 8000c90:	400b      	ands	r3, r1
 8000c92:	60d3      	str	r3, [r2, #12]
 8000c94:	e019      	b.n	8000cca <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )//Dual Triggering
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	795b      	ldrb	r3, [r3, #5]
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d115      	bne.n	8000cca <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c9e:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <GPIO_Init+0x198>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	7912      	ldrb	r2, [r2, #4]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	2201      	movs	r2, #1
 8000caa:	408a      	lsls	r2, r1
 8000cac:	4611      	mov	r1, r2
 8000cae:	4a2b      	ldr	r2, [pc, #172]	; (8000d5c <GPIO_Init+0x198>)
 8000cb0:	430b      	orrs	r3, r1
 8000cb2:	6093      	str	r3, [r2, #8]

			//2.Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cb4:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <GPIO_Init+0x198>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	7912      	ldrb	r2, [r2, #4]
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	408a      	lsls	r2, r1
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <GPIO_Init+0x198>)
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	791b      	ldrb	r3, [r3, #4]
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	74fb      	strb	r3, [r7, #19]
		//this tells us which CR of the SYSCFG_EXTI block we have to access

		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	74bb      	strb	r3, [r7, #18]
		// this tells us the bit field to access

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <GPIO_Init+0x19c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d04e      	beq.n	8000d84 <GPIO_Init+0x1c0>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a1e      	ldr	r2, [pc, #120]	; (8000d64 <GPIO_Init+0x1a0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d032      	beq.n	8000d56 <GPIO_Init+0x192>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a1c      	ldr	r2, [pc, #112]	; (8000d68 <GPIO_Init+0x1a4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d02b      	beq.n	8000d52 <GPIO_Init+0x18e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <GPIO_Init+0x1a8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d024      	beq.n	8000d4e <GPIO_Init+0x18a>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <GPIO_Init+0x1ac>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d01d      	beq.n	8000d4a <GPIO_Init+0x186>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <GPIO_Init+0x1b0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d016      	beq.n	8000d46 <GPIO_Init+0x182>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <GPIO_Init+0x1b4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d00f      	beq.n	8000d42 <GPIO_Init+0x17e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <GPIO_Init+0x1b8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d008      	beq.n	8000d3e <GPIO_Init+0x17a>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <GPIO_Init+0x1bc>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d101      	bne.n	8000d3a <GPIO_Init+0x176>
 8000d36:	2308      	movs	r3, #8
 8000d38:	e025      	b.n	8000d86 <GPIO_Init+0x1c2>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e023      	b.n	8000d86 <GPIO_Init+0x1c2>
 8000d3e:	2307      	movs	r3, #7
 8000d40:	e021      	b.n	8000d86 <GPIO_Init+0x1c2>
 8000d42:	2306      	movs	r3, #6
 8000d44:	e01f      	b.n	8000d86 <GPIO_Init+0x1c2>
 8000d46:	2305      	movs	r3, #5
 8000d48:	e01d      	b.n	8000d86 <GPIO_Init+0x1c2>
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	e01b      	b.n	8000d86 <GPIO_Init+0x1c2>
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e019      	b.n	8000d86 <GPIO_Init+0x1c2>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e017      	b.n	8000d86 <GPIO_Init+0x1c2>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e015      	b.n	8000d86 <GPIO_Init+0x1c2>
 8000d5a:	bf00      	nop
 8000d5c:	40013c00 	.word	0x40013c00
 8000d60:	40020000 	.word	0x40020000
 8000d64:	40020400 	.word	0x40020400
 8000d68:	40020800 	.word	0x40020800
 8000d6c:	40020c00 	.word	0x40020c00
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40021400 	.word	0x40021400
 8000d78:	40021800 	.word	0x40021800
 8000d7c:	40021c00 	.word	0x40021c00
 8000d80:	40022000 	.word	0x40022000
 8000d84:	2300      	movs	r3, #0
 8000d86:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000d88:	4b5c      	ldr	r3, [pc, #368]	; (8000efc <GPIO_Init+0x338>)
 8000d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8c:	4a5b      	ldr	r2, [pc, #364]	; (8000efc <GPIO_Init+0x338>)
 8000d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d92:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000d94:	7c7a      	ldrb	r2, [r7, #17]
 8000d96:	7cbb      	ldrb	r3, [r7, #18]
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	fa02 f103 	lsl.w	r1, r2, r3
 8000d9e:	4a58      	ldr	r2, [pc, #352]	; (8000f00 <GPIO_Init+0x33c>)
 8000da0:	7cfb      	ldrb	r3, [r7, #19]
 8000da2:	3302      	adds	r3, #2
 8000da4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000da8:	4b56      	ldr	r3, [pc, #344]	; (8000f04 <GPIO_Init+0x340>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	7912      	ldrb	r2, [r2, #4]
 8000db0:	4611      	mov	r1, r2
 8000db2:	2201      	movs	r2, #1
 8000db4:	408a      	lsls	r2, r1
 8000db6:	4611      	mov	r1, r2
 8000db8:	4a52      	ldr	r2, [pc, #328]	; (8000f04 <GPIO_Init+0x340>)
 8000dba:	430b      	orrs	r3, r1
 8000dbc:	6013      	str	r3, [r2, #0]
	/*
	 * SPEED Configuration
	 */

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	799b      	ldrb	r3, [r3, #6]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	791b      	ldrb	r3, [r3, #4]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	791b      	ldrb	r3, [r3, #4]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2103      	movs	r1, #3
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	4619      	mov	r1, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	400a      	ands	r2, r1
 8000dec:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6899      	ldr	r1, [r3, #8]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	609a      	str	r2, [r3, #8]

    temp=0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
    /*
	 * PULL Configuration
	 */

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	79db      	ldrb	r3, [r3, #7]
 8000e06:	461a      	mov	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	791b      	ldrb	r3, [r3, #4]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2103      	movs	r1, #3
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	4619      	mov	r1, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	400a      	ands	r2, r1
 8000e30:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68d9      	ldr	r1, [r3, #12]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
	/*
	 * OUTPUT TYPE Configuration
	 */

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7a1b      	ldrb	r3, [r3, #8]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	791b      	ldrb	r3, [r3, #4]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	791b      	ldrb	r3, [r3, #4]
 8000e60:	4619      	mov	r1, r3
 8000e62:	2301      	movs	r3, #1
 8000e64:	408b      	lsls	r3, r1
 8000e66:	43db      	mvns	r3, r3
 8000e68:	4619      	mov	r1, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	400a      	ands	r2, r1
 8000e70:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6859      	ldr	r1, [r3, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	605a      	str	r2, [r3, #4]

	temp=0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
	 * ALTERNATE MODE Configuration
	 */


	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	795b      	ldrb	r3, [r3, #5]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d131      	bne.n	8000ef2 <GPIO_Init+0x32e>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	791b      	ldrb	r3, [r3, #4]
 8000e92:	08db      	lsrs	r3, r3, #3
 8000e94:	743b      	strb	r3, [r7, #16]
		//this is done to decide which register to use, AFRL or AFRH

		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	791b      	ldrb	r3, [r3, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	73fb      	strb	r3, [r7, #15]
		//this done to tell us the bit field to be configured (AFRx) in the Low or High Registers.

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) );
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	7c3a      	ldrb	r2, [r7, #16]
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	7c3a      	ldrb	r2, [r7, #16]
 8000ec0:	4001      	ands	r1, r0
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//clearing; (temp2 * 4) tells us teh starting bit position of the bit field that needs configuring

		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	7c3a      	ldrb	r2, [r7, #16]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7a5b      	ldrb	r3, [r3, #9]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	7c3a      	ldrb	r2, [r7, #16]
 8000eea:	4301      	orrs	r1, r0
 8000eec:	3208      	adds	r2, #8
 8000eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40013800 	.word	0x40013800
 8000f04:	40013c00 	.word	0x40013c00

08000f08 <SPI_PeriClockControl>:
 *
 * 	@NOTE					   -
 */


void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d12a      	bne.n	8000f70 <SPI_PeriClockControl+0x68>

		if(pSPIx == SPI1){
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a2d      	ldr	r2, [pc, #180]	; (8000fd4 <SPI_PeriClockControl+0xcc>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d106      	bne.n	8000f30 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a2c      	ldr	r2, [pc, #176]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000f28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	e01f      	b.n	8000f70 <SPI_PeriClockControl+0x68>
		}

		else if(pSPIx == SPI2){
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a2a      	ldr	r2, [pc, #168]	; (8000fdc <SPI_PeriClockControl+0xd4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d106      	bne.n	8000f46 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000f38:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	4a26      	ldr	r2, [pc, #152]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f42:	6413      	str	r3, [r2, #64]	; 0x40
 8000f44:	e014      	b.n	8000f70 <SPI_PeriClockControl+0x68>
		}

		else if(pSPIx == SPI3){
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a25      	ldr	r2, [pc, #148]	; (8000fe0 <SPI_PeriClockControl+0xd8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d106      	bne.n	8000f5c <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	e009      	b.n	8000f70 <SPI_PeriClockControl+0x68>
		}
		else if(pSPIx == SPI4){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <SPI_PeriClockControl+0xdc>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d105      	bne.n	8000f70 <SPI_PeriClockControl+0x68>
			SPI4_PCLK_EN();
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000f6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f6e:	6453      	str	r3, [r2, #68]	; 0x44
		}

	}
	if (EnorDi == DISABLE){
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d127      	bne.n	8000fc6 <SPI_PeriClockControl+0xbe>

		if(pSPIx == SPI1){
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <SPI_PeriClockControl+0xcc>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d105      	bne.n	8000f8a <SPI_PeriClockControl+0x82>
			SPI1_PCLK_DI();
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000f84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
		}

		if(pSPIx == SPI2){
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <SPI_PeriClockControl+0xd4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d105      	bne.n	8000f9e <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
		}

		if(pSPIx == SPI3){
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <SPI_PeriClockControl+0xd8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d105      	bne.n	8000fb2 <SPI_PeriClockControl+0xaa>
			SPI3_PCLK_DI();
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000fac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
		}

		if(pSPIx == SPI4){
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <SPI_PeriClockControl+0xdc>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d105      	bne.n	8000fc6 <SPI_PeriClockControl+0xbe>
			SPI4_PCLK_DI();
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <SPI_PeriClockControl+0xd0>)
 8000fc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
		}

	}
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40013000 	.word	0x40013000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40003800 	.word	0x40003800
 8000fe0:	40003c00 	.word	0x40003c00
 8000fe4:	40013400 	.word	0x40013400

08000fe8 <SPI_Init>:
 *
 * 	@return					   -
 *
 * 	@NOTE					   -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

	//Enable tyhe peripheral Clock
	SPI_PeriClockControl(pSPIHandle->pSPIx,ENABLE);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff86 	bl	8000f08 <SPI_PeriClockControl>

	//Let's configure the SPI_CR1 Register

	uint32_t tempreg = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]


	//1. Configure the device mode

	//initializing the device in the SLAVE mode
	tempreg |= pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	791b      	ldrb	r3, [r3, #4]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]

	//2. Define the bus for it's mode
	if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUSCONGID_FD){
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	795b      	ldrb	r3, [r3, #5]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d104      	bne.n	8001020 <SPI_Init+0x38>

		//Clear the bidimode
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e014      	b.n	800104a <SPI_Init+0x62>
	}else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUSCONGID_HD){
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	795b      	ldrb	r3, [r3, #5]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d104      	bne.n	8001032 <SPI_Init+0x4a>
		//Enable the bidimode
		tempreg |= (1 <<SPI_CR1_BIDIMODE);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e00b      	b.n	800104a <SPI_Init+0x62>
	}else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUSCONGID_SIMPLEX_RXONLY){
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	795b      	ldrb	r3, [r3, #5]
 8001036:	2b03      	cmp	r3, #3
 8001038:	d107      	bne.n	800104a <SPI_Init+0x62>
		//Clear the bidimode and set the RXONLY bit
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001040:	60fb      	str	r3, [r7, #12]

		tempreg |= (1<<SPI_CR1_RXONLY );
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001048:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the SPI clock for the speed that you desire
	tempreg |= pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	799b      	ldrb	r3, [r3, #6]
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	461a      	mov	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	79db      	ldrb	r3, [r3, #7]
 800105c:	02db      	lsls	r3, r3, #11
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7a1b      	ldrb	r3, [r3, #8]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	461a      	mov	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]

	//6.COnfigure the CPHA
	tempreg |= pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7a5b      	ldrb	r3, [r3, #9]
 8001078:	461a      	mov	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7a9b      	ldrb	r3, [r3, #10]
 8001084:	025b      	lsls	r3, r3, #9
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 |= tempreg;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6819      	ldr	r1, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]

}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <SPI_GetFlagStatus>:

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & FlagName){
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <SPI_ReceiveData>:
	}
}


void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80010da:	e027      	b.n	800112c <SPI_ReceiveData+0x5e>
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 80010dc:	bf00      	nop
 80010de:	2101      	movs	r1, #1
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff ffe0 	bl	80010a6 <SPI_GetFlagStatus>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f8      	beq.n	80010de <SPI_ReceiveData+0x10>

			//2. check the DFF bit in CR1
			if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00e      	beq.n	8001116 <SPI_ReceiveData+0x48>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	801a      	strh	r2, [r3, #0]
				Len--;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3b01      	subs	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
				Len--;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3301      	adds	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	e00a      	b.n	800112c <SPI_ReceiveData+0x5e>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = pSPIx->DR ;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	701a      	strb	r2, [r3, #0]
				Len--;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3301      	adds	r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1d4      	bne.n	80010dc <SPI_ReceiveData+0xe>
			}
		}

}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE ){
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d106      	bne.n	800115c <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);

	}
}
 800115a:	e005      	b.n	8001168 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <SPI_SSIConfig>:
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE ){
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d106      	bne.n	8001194 <SPI_SSIConfig+0x20>
			pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	601a      	str	r2, [r3, #0]
		}
		else{
			pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);

		}
}
 8001192:	e005      	b.n	80011a0 <SPI_SSIConfig+0x2c>
			pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011d6:	490e      	ldr	r1, [pc, #56]	; (8001210 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011ec:	4c0b      	ldr	r4, [pc, #44]	; (800121c <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011fa:	f7ff ffd7 	bl	80011ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fe:	f000 ffb9 	bl	8002174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001202:	f7ff f96b 	bl	80004dc <main>
  bx  lr    
 8001206:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001208:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001214:	080021f8 	.word	0x080021f8
  ldr r2, =_sbss
 8001218:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800121c:	20000040 	.word	0x20000040

08001220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC_IRQHandler>
	...

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <HAL_Init+0x40>)
 800122e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001232:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <HAL_Init+0x40>)
 800123a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_Init+0x40>)
 8001246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 f90d 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001252:	2000      	movs	r0, #0
 8001254:	f000 f808 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff fbaa 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023c00 	.word	0x40023c00

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x54>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x58>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f917 	bl	80014ba <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f000 f8ed 	bl	8001482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <HAL_InitTick+0x5c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008
 80012ec:	2000003c 	.word	0x2000003c

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	2000003c 	.word	0x2000003c

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	; (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff8e 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff47 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff5c 	bl	8001350 <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff8e 	bl	80013c0 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5d 	bl	800136c <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffb0 	bl	8001428 <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d106      	bne.n	80014f0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a08      	ldr	r2, [pc, #32]	; (8001508 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80014ee:	e005      	b.n	80014fc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014f6:	f023 0304 	bic.w	r3, r3, #4
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001510:	f000 f802 	bl	8001518 <HAL_SYSTICK_Callback>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	e16b      	b.n	800181c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001544:	2201      	movs	r2, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	429a      	cmp	r2, r3
 800155e:	f040 815a 	bne.w	8001816 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b01      	cmp	r3, #1
 800156c:	d005      	beq.n	800157a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001576:	2b02      	cmp	r3, #2
 8001578:	d130      	bne.n	80015dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b0:	2201      	movs	r2, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 0201 	and.w	r2, r3, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d017      	beq.n	8001618 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d123      	bne.n	800166c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	08da      	lsrs	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	69b9      	ldr	r1, [r7, #24]
 8001668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0203 	and.w	r2, r3, #3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80b4 	beq.w	8001816 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b60      	ldr	r3, [pc, #384]	; (8001834 <HAL_GPIO_Init+0x30c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a5f      	ldr	r2, [pc, #380]	; (8001834 <HAL_GPIO_Init+0x30c>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b5d      	ldr	r3, [pc, #372]	; (8001834 <HAL_GPIO_Init+0x30c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ca:	4a5b      	ldr	r2, [pc, #364]	; (8001838 <HAL_GPIO_Init+0x310>)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	220f      	movs	r2, #15
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a52      	ldr	r2, [pc, #328]	; (800183c <HAL_GPIO_Init+0x314>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d02b      	beq.n	800174e <HAL_GPIO_Init+0x226>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a51      	ldr	r2, [pc, #324]	; (8001840 <HAL_GPIO_Init+0x318>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d025      	beq.n	800174a <HAL_GPIO_Init+0x222>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a50      	ldr	r2, [pc, #320]	; (8001844 <HAL_GPIO_Init+0x31c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01f      	beq.n	8001746 <HAL_GPIO_Init+0x21e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4f      	ldr	r2, [pc, #316]	; (8001848 <HAL_GPIO_Init+0x320>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d019      	beq.n	8001742 <HAL_GPIO_Init+0x21a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4e      	ldr	r2, [pc, #312]	; (800184c <HAL_GPIO_Init+0x324>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d013      	beq.n	800173e <HAL_GPIO_Init+0x216>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4d      	ldr	r2, [pc, #308]	; (8001850 <HAL_GPIO_Init+0x328>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00d      	beq.n	800173a <HAL_GPIO_Init+0x212>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4c      	ldr	r2, [pc, #304]	; (8001854 <HAL_GPIO_Init+0x32c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d007      	beq.n	8001736 <HAL_GPIO_Init+0x20e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4b      	ldr	r2, [pc, #300]	; (8001858 <HAL_GPIO_Init+0x330>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d101      	bne.n	8001732 <HAL_GPIO_Init+0x20a>
 800172e:	2307      	movs	r3, #7
 8001730:	e00e      	b.n	8001750 <HAL_GPIO_Init+0x228>
 8001732:	2308      	movs	r3, #8
 8001734:	e00c      	b.n	8001750 <HAL_GPIO_Init+0x228>
 8001736:	2306      	movs	r3, #6
 8001738:	e00a      	b.n	8001750 <HAL_GPIO_Init+0x228>
 800173a:	2305      	movs	r3, #5
 800173c:	e008      	b.n	8001750 <HAL_GPIO_Init+0x228>
 800173e:	2304      	movs	r3, #4
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x228>
 8001742:	2303      	movs	r3, #3
 8001744:	e004      	b.n	8001750 <HAL_GPIO_Init+0x228>
 8001746:	2302      	movs	r3, #2
 8001748:	e002      	b.n	8001750 <HAL_GPIO_Init+0x228>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x228>
 800174e:	2300      	movs	r3, #0
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	f002 0203 	and.w	r2, r2, #3
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	4093      	lsls	r3, r2
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001760:	4935      	ldr	r1, [pc, #212]	; (8001838 <HAL_GPIO_Init+0x310>)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <HAL_GPIO_Init+0x334>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001792:	4a32      	ldr	r2, [pc, #200]	; (800185c <HAL_GPIO_Init+0x334>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001798:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_GPIO_Init+0x334>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017bc:	4a27      	ldr	r2, [pc, #156]	; (800185c <HAL_GPIO_Init+0x334>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_GPIO_Init+0x334>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e6:	4a1d      	ldr	r2, [pc, #116]	; (800185c <HAL_GPIO_Init+0x334>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_GPIO_Init+0x334>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001810:	4a12      	ldr	r2, [pc, #72]	; (800185c <HAL_GPIO_Init+0x334>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3301      	adds	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b0f      	cmp	r3, #15
 8001820:	f67f ae90 	bls.w	8001544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40013800 	.word	0x40013800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40021400 	.word	0x40021400
 8001854:	40021800 	.word	0x40021800
 8001858:	40021c00 	.word	0x40021c00
 800185c:	40013c00 	.word	0x40013c00

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e267      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d075      	beq.n	800199e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018b2:	4b88      	ldr	r3, [pc, #544]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d00c      	beq.n	80018d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018be:	4b85      	ldr	r3, [pc, #532]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d112      	bne.n	80018f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ca:	4b82      	ldr	r3, [pc, #520]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018d6:	d10b      	bne.n	80018f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d8:	4b7e      	ldr	r3, [pc, #504]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d05b      	beq.n	800199c <HAL_RCC_OscConfig+0x108>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d157      	bne.n	800199c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e242      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d106      	bne.n	8001908 <HAL_RCC_OscConfig+0x74>
 80018fa:	4b76      	ldr	r3, [pc, #472]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a75      	ldr	r2, [pc, #468]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e01d      	b.n	8001944 <HAL_RCC_OscConfig+0xb0>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x98>
 8001912:	4b70      	ldr	r3, [pc, #448]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a6f      	ldr	r2, [pc, #444]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b6d      	ldr	r3, [pc, #436]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6c      	ldr	r2, [pc, #432]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0xb0>
 800192c:	4b69      	ldr	r3, [pc, #420]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a68      	ldr	r2, [pc, #416]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a65      	ldr	r2, [pc, #404]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 800193e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fcd0 	bl	80012f0 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff fccc 	bl	80012f0 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e207      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	4b5b      	ldr	r3, [pc, #364]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0xc0>
 8001972:	e014      	b.n	800199e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fcbc 	bl	80012f0 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff fcb8 	bl	80012f0 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1f3      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	4b51      	ldr	r3, [pc, #324]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0xe8>
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d063      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019aa:	4b4a      	ldr	r3, [pc, #296]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00b      	beq.n	80019ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b6:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d11c      	bne.n	80019fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c2:	4b44      	ldr	r3, [pc, #272]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d116      	bne.n	80019fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	4b41      	ldr	r3, [pc, #260]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_RCC_OscConfig+0x152>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e1c7      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4937      	ldr	r1, [pc, #220]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fa:	e03a      	b.n	8001a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a04:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <HAL_RCC_OscConfig+0x244>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fc71 	bl	80012f0 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff fc6d 	bl	80012f0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e1a8      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4925      	ldr	r1, [pc, #148]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_RCC_OscConfig+0x244>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fc50 	bl	80012f0 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a54:	f7ff fc4c 	bl	80012f0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e187      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d036      	beq.n	8001aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d016      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_RCC_OscConfig+0x248>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fc30 	bl	80012f0 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a94:	f7ff fc2c 	bl	80012f0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e167      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x200>
 8001ab2:	e01b      	b.n	8001aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_RCC_OscConfig+0x248>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fc19 	bl	80012f0 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac0:	e00e      	b.n	8001ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fc15 	bl	80012f0 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d907      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e150      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	42470000 	.word	0x42470000
 8001adc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae0:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1ea      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 8097 	beq.w	8001c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afe:	4b81      	ldr	r3, [pc, #516]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10f      	bne.n	8001b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	4b7d      	ldr	r3, [pc, #500]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a7c      	ldr	r2, [pc, #496]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b7a      	ldr	r3, [pc, #488]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b26:	2301      	movs	r3, #1
 8001b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2a:	4b77      	ldr	r3, [pc, #476]	; (8001d08 <HAL_RCC_OscConfig+0x474>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d118      	bne.n	8001b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b36:	4b74      	ldr	r3, [pc, #464]	; (8001d08 <HAL_RCC_OscConfig+0x474>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a73      	ldr	r2, [pc, #460]	; (8001d08 <HAL_RCC_OscConfig+0x474>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b42:	f7ff fbd5 	bl	80012f0 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4a:	f7ff fbd1 	bl	80012f0 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e10c      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5c:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <HAL_RCC_OscConfig+0x474>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x2ea>
 8001b70:	4b64      	ldr	r3, [pc, #400]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b74:	4a63      	ldr	r2, [pc, #396]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7c:	e01c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x324>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x30c>
 8001b86:	4b5f      	ldr	r3, [pc, #380]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	4a5e      	ldr	r2, [pc, #376]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6713      	str	r3, [r2, #112]	; 0x70
 8001b92:	4b5c      	ldr	r3, [pc, #368]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b96:	4a5b      	ldr	r2, [pc, #364]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x324>
 8001ba0:	4b58      	ldr	r3, [pc, #352]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	4a57      	ldr	r2, [pc, #348]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bac:	4b55      	ldr	r3, [pc, #340]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	4a54      	ldr	r2, [pc, #336]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	f023 0304 	bic.w	r3, r3, #4
 8001bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d015      	beq.n	8001bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fb96 	bl	80012f0 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fb92 	bl	80012f0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0cb      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bde:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0ee      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x334>
 8001bea:	e014      	b.n	8001c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7ff fb80 	bl	80012f0 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fb7c 	bl	80012f0 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e0b5      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0a:	4b3e      	ldr	r3, [pc, #248]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ee      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c16:	7dfb      	ldrb	r3, [r7, #23]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d105      	bne.n	8001c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1c:	4b39      	ldr	r3, [pc, #228]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a38      	ldr	r2, [pc, #224]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a1 	beq.w	8001d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c32:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d05c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d141      	bne.n	8001cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b31      	ldr	r3, [pc, #196]	; (8001d0c <HAL_RCC_OscConfig+0x478>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fb50 	bl	80012f0 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c54:	f7ff fb4c 	bl	80012f0 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e087      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c66:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	019b      	lsls	r3, r3, #6
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	085b      	lsrs	r3, r3, #1
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	041b      	lsls	r3, r3, #16
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	491b      	ldr	r1, [pc, #108]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_RCC_OscConfig+0x478>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fb25 	bl	80012f0 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001caa:	f7ff fb21 	bl	80012f0 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e05c      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x416>
 8001cc8:	e054      	b.n	8001d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <HAL_RCC_OscConfig+0x478>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fb0e 	bl	80012f0 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff fb0a 	bl	80012f0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e045      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_RCC_OscConfig+0x470>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x444>
 8001cf6:	e03d      	b.n	8001d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d107      	bne.n	8001d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e038      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCC_OscConfig+0x4ec>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d028      	beq.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d121      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d11a      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d40:	4013      	ands	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d111      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	085b      	lsrs	r3, r3, #1
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0cc      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d90c      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b8      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd8:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a58      	ldr	r2, [pc, #352]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a52      	ldr	r2, [pc, #328]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	494d      	ldr	r1, [pc, #308]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d044      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d119      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e07f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e42:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e52:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e067      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e62:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f023 0203 	bic.w	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4934      	ldr	r1, [pc, #208]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e74:	f7ff fa3c 	bl	80012f0 <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7c:	f7ff fa38 	bl	80012f0 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e04f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 020c 	and.w	r2, r3, #12
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d1eb      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d20c      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e032      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4916      	ldr	r1, [pc, #88]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	490e      	ldr	r1, [pc, #56]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f0a:	f000 f821 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	490a      	ldr	r1, [pc, #40]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	5ccb      	ldrb	r3, [r1, r3]
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f99c 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00
 8001f40:	40023800 	.word	0x40023800
 8001f44:	080021d8 	.word	0x080021d8
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000004 	.word	0x20000004

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f54:	b094      	sub	sp, #80	; 0x50
 8001f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f60:	2300      	movs	r3, #0
 8001f62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f68:	4b79      	ldr	r3, [pc, #484]	; (8002150 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d00d      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x40>
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	f200 80e1 	bhi.w	800213c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x34>
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f82:	e0db      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f84:	4b73      	ldr	r3, [pc, #460]	; (8002154 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f88:	e0db      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f8a:	4b73      	ldr	r3, [pc, #460]	; (8002158 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f8e:	e0d8      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f90:	4b6f      	ldr	r3, [pc, #444]	; (8002150 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f9a:	4b6d      	ldr	r3, [pc, #436]	; (8002150 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d063      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa6:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	099b      	lsrs	r3, r3, #6
 8001fac:	2200      	movs	r2, #0
 8001fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8001fba:	2300      	movs	r3, #0
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8001fbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fc2:	4622      	mov	r2, r4
 8001fc4:	462b      	mov	r3, r5
 8001fc6:	f04f 0000 	mov.w	r0, #0
 8001fca:	f04f 0100 	mov.w	r1, #0
 8001fce:	0159      	lsls	r1, r3, #5
 8001fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fd4:	0150      	lsls	r0, r2, #5
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4621      	mov	r1, r4
 8001fdc:	1a51      	subs	r1, r2, r1
 8001fde:	6139      	str	r1, [r7, #16]
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ff4:	4659      	mov	r1, fp
 8001ff6:	018b      	lsls	r3, r1, #6
 8001ff8:	4651      	mov	r1, sl
 8001ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ffe:	4651      	mov	r1, sl
 8002000:	018a      	lsls	r2, r1, #6
 8002002:	4651      	mov	r1, sl
 8002004:	ebb2 0801 	subs.w	r8, r2, r1
 8002008:	4659      	mov	r1, fp
 800200a:	eb63 0901 	sbc.w	r9, r3, r1
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800201a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800201e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002022:	4690      	mov	r8, r2
 8002024:	4699      	mov	r9, r3
 8002026:	4623      	mov	r3, r4
 8002028:	eb18 0303 	adds.w	r3, r8, r3
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	462b      	mov	r3, r5
 8002030:	eb49 0303 	adc.w	r3, r9, r3
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002042:	4629      	mov	r1, r5
 8002044:	024b      	lsls	r3, r1, #9
 8002046:	4621      	mov	r1, r4
 8002048:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800204c:	4621      	mov	r1, r4
 800204e:	024a      	lsls	r2, r1, #9
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002056:	2200      	movs	r2, #0
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
 800205a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800205c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002060:	f7fe f8b2 	bl	80001c8 <__aeabi_uldivmod>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4613      	mov	r3, r2
 800206a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800206c:	e058      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206e:	4b38      	ldr	r3, [pc, #224]	; (8002150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	099b      	lsrs	r3, r3, #6
 8002074:	2200      	movs	r2, #0
 8002076:	4618      	mov	r0, r3
 8002078:	4611      	mov	r1, r2
 800207a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800207e:	623b      	str	r3, [r7, #32]
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
 8002084:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002088:	4642      	mov	r2, r8
 800208a:	464b      	mov	r3, r9
 800208c:	f04f 0000 	mov.w	r0, #0
 8002090:	f04f 0100 	mov.w	r1, #0
 8002094:	0159      	lsls	r1, r3, #5
 8002096:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800209a:	0150      	lsls	r0, r2, #5
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4641      	mov	r1, r8
 80020a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80020a6:	4649      	mov	r1, r9
 80020a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020c0:	ebb2 040a 	subs.w	r4, r2, sl
 80020c4:	eb63 050b 	sbc.w	r5, r3, fp
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	00eb      	lsls	r3, r5, #3
 80020d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020d6:	00e2      	lsls	r2, r4, #3
 80020d8:	4614      	mov	r4, r2
 80020da:	461d      	mov	r5, r3
 80020dc:	4643      	mov	r3, r8
 80020de:	18e3      	adds	r3, r4, r3
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	464b      	mov	r3, r9
 80020e4:	eb45 0303 	adc.w	r3, r5, r3
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020f6:	4629      	mov	r1, r5
 80020f8:	028b      	lsls	r3, r1, #10
 80020fa:	4621      	mov	r1, r4
 80020fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002100:	4621      	mov	r1, r4
 8002102:	028a      	lsls	r2, r1, #10
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210a:	2200      	movs	r2, #0
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	61fa      	str	r2, [r7, #28]
 8002110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002114:	f7fe f858 	bl	80001c8 <__aeabi_uldivmod>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4613      	mov	r3, r2
 800211e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	3301      	adds	r3, #1
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800213a:	e002      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCC_GetSysClockFreq+0x204>)
 800213e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002144:	4618      	mov	r0, r3
 8002146:	3750      	adds	r7, #80	; 0x50
 8002148:	46bd      	mov	sp, r7
 800214a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	00f42400 	.word	0x00f42400
 8002158:	007a1200 	.word	0x007a1200

0800215c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_RCC_GetHCLKFreq+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000000 	.word	0x20000000

08002174 <__libc_init_array>:
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	4d0d      	ldr	r5, [pc, #52]	; (80021ac <__libc_init_array+0x38>)
 8002178:	4c0d      	ldr	r4, [pc, #52]	; (80021b0 <__libc_init_array+0x3c>)
 800217a:	1b64      	subs	r4, r4, r5
 800217c:	10a4      	asrs	r4, r4, #2
 800217e:	2600      	movs	r6, #0
 8002180:	42a6      	cmp	r6, r4
 8002182:	d109      	bne.n	8002198 <__libc_init_array+0x24>
 8002184:	4d0b      	ldr	r5, [pc, #44]	; (80021b4 <__libc_init_array+0x40>)
 8002186:	4c0c      	ldr	r4, [pc, #48]	; (80021b8 <__libc_init_array+0x44>)
 8002188:	f000 f818 	bl	80021bc <_init>
 800218c:	1b64      	subs	r4, r4, r5
 800218e:	10a4      	asrs	r4, r4, #2
 8002190:	2600      	movs	r6, #0
 8002192:	42a6      	cmp	r6, r4
 8002194:	d105      	bne.n	80021a2 <__libc_init_array+0x2e>
 8002196:	bd70      	pop	{r4, r5, r6, pc}
 8002198:	f855 3b04 	ldr.w	r3, [r5], #4
 800219c:	4798      	blx	r3
 800219e:	3601      	adds	r6, #1
 80021a0:	e7ee      	b.n	8002180 <__libc_init_array+0xc>
 80021a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a6:	4798      	blx	r3
 80021a8:	3601      	adds	r6, #1
 80021aa:	e7f2      	b.n	8002192 <__libc_init_array+0x1e>
 80021ac:	080021f0 	.word	0x080021f0
 80021b0:	080021f0 	.word	0x080021f0
 80021b4:	080021f0 	.word	0x080021f0
 80021b8:	080021f4 	.word	0x080021f4

080021bc <_init>:
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021be:	bf00      	nop
 80021c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c2:	bc08      	pop	{r3}
 80021c4:	469e      	mov	lr, r3
 80021c6:	4770      	bx	lr

080021c8 <_fini>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	bf00      	nop
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr
